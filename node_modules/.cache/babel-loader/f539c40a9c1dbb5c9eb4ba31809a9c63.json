{"ast":null,"code":"import _objectSpread from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\src\\\\components\\\\HTML\\\\elements\\\\buttons\\\\placeBet.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { useEffect } from \"react\";\nimport { GlobalState } from \"../../../global_states/global_state\";\nimport { generateDeck } from \"../../../game/functions/generateDeck\";\nimport { getCount } from \"../../../game/functions/getCount\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function PlaceBet() {\n  _s();\n\n  var _useContext = useContext(GlobalState),\n      currentGameInfo = _useContext.currentGameInfo,\n      setGameInfo = _useContext.setGameInfo,\n      currentUserInfo = _useContext.currentUserInfo;\n\n  var inputValue = currentGameInfo.inputValue;\n  var balance = currentUserInfo.balance;\n  var deck = currentGameInfo.deck;\n  var player = currentGameInfo.player;\n  var dealer = currentGameInfo.dealer; //const message = currentGameInfo.message;\n\n  function getRandomCard(__deck) {\n    console.log(\"getRandomCard() just ran\");\n    var updatedDeck = __deck;\n    var ind = Math.floor(Math.random() * updatedDeck.length);\n    var randomCard = updatedDeck[ind];\n    updatedDeck.splice(ind, 1);\n    setGameInfo(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        deck: updatedDeck\n      });\n    });\n    return randomCard;\n  }\n\n  function dealCards(_deck) {\n    var playerCard1 = getRandomCard(_deck);\n    var dealerCard1 = getRandomCard(_deck);\n    var playerCard2 = getRandomCard(_deck);\n    var playerStartingHand = [playerCard1, playerCard2];\n    var dealerStartingHand = [dealerCard1];\n    player = {\n      cards: playerStartingHand,\n      count: getCount(playerStartingHand)\n    };\n    dealer = {\n      cards: dealerStartingHand,\n      count: getCount(dealerStartingHand)\n    };\n    setGameInfo(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        player: player,\n        dealer: dealer\n      });\n    });\n  }\n\n  var updateBet = function updateBet(e) {\n    setGameInfo(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        inputValue: e.target.value\n      });\n    });\n  };\n\n  var placeBet = function placeBet(e) {\n    e.preventDefault();\n    var currentBet = currentGameInfo.inputValue;\n\n    if (currentBet > balance) {\n      setGameInfo(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          message: \"Insufficient funds\"\n        });\n      });\n    } else if (currentBet % 1 != 0) {\n      setGameInfo(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          message: \"Only whole number bets allowed\"\n        });\n      });\n    } else {\n      deck = deck.length < 10 ? generateDeck() : deck;\n      dealCards(deck);\n      setGameInfo(function (prev) {\n        return _objectSpread(_objectSpread({}, prev), {}, {\n          currentBet: currentBet,\n          gameOver: false,\n          message: null\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-bet\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: placeBet,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"enter here to bet\",\n        value: inputValue,\n        onChange: updateBet\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: placeBet,\n        children: \"Place Bet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlaceBet, \"TwtkYe2KZMlhice/0B1n5OAT5aI=\");\n\n_c = PlaceBet;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaceBet\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/HTML/elements/buttons/placeBet.js"],"names":["useContext","useEffect","GlobalState","generateDeck","getCount","PlaceBet","currentGameInfo","setGameInfo","currentUserInfo","inputValue","balance","deck","player","dealer","getRandomCard","__deck","console","log","updatedDeck","ind","Math","floor","random","length","randomCard","splice","prev","dealCards","_deck","playerCard1","dealerCard1","playerCard2","playerStartingHand","dealerStartingHand","cards","count","updateBet","e","target","value","placeBet","preventDefault","currentBet","message","gameOver"],"mappings":"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","sourcesContent":["import { useContext } from \"react\"\r\nimport { useEffect } from \"react\";\r\nimport { GlobalState } from \"../../../global_states/global_state\"\r\nimport { generateDeck } from \"../../../game/functions/generateDeck\";\r\nimport { getCount } from \"../../../game/functions/getCount\";\r\n\r\n\r\nexport function PlaceBet() {\r\n    const { currentGameInfo, setGameInfo, currentUserInfo } = useContext(GlobalState);\r\n    const inputValue = currentGameInfo.inputValue;\r\n    const balance = currentUserInfo.balance;\r\n    var deck = currentGameInfo.deck;\r\n    var player = currentGameInfo.player;\r\n    var dealer = currentGameInfo.dealer;\r\n    //const message = currentGameInfo.message;\r\n\r\n    function getRandomCard(__deck) {\r\n        console.log(\"getRandomCard() just ran\");\r\n        var updatedDeck = __deck;\r\n        var ind = Math.floor(Math.random() * updatedDeck.length);\r\n        const randomCard  = updatedDeck[ind];\r\n        updatedDeck.splice(ind, 1);\r\n        \r\n        setGameInfo(prev => {\r\n            return {\r\n                ...prev,\r\n                deck: updatedDeck\r\n            }\r\n        })\r\n        return  randomCard \r\n    }\r\n\r\n    function dealCards(_deck) {\r\n\r\n        const playerCard1 = getRandomCard(_deck);\r\n        const dealerCard1 = getRandomCard(_deck);\r\n        const playerCard2 = getRandomCard(_deck);\r\n        const playerStartingHand = [playerCard1, playerCard2];\r\n        const dealerStartingHand = [dealerCard1];\r\n      \r\n      \r\n        player = {\r\n          cards: playerStartingHand,\r\n          count: getCount(playerStartingHand) };\r\n\r\n      \r\n        dealer = {\r\n          cards: dealerStartingHand,\r\n          count: getCount(dealerStartingHand) };\r\n\r\n      \r\n        setGameInfo(prev => {\r\n            return {...prev, player, dealer}\r\n        })\r\n      \r\n        \r\n      }\r\n    \r\n    const updateBet = e => {\r\n        setGameInfo(prev => {\r\n            return {\r\n                ...prev,\r\n                inputValue: e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    const placeBet = (e) => {\r\n        e.preventDefault();\r\n        const currentBet = currentGameInfo.inputValue;\r\n        if (currentBet > balance) {\r\n            setGameInfo(prev => {\r\n                return {\r\n                    ...prev,\r\n                    message: \"Insufficient funds\"\r\n                }\r\n            })\r\n        } else if (currentBet % 1 != 0) {\r\n            setGameInfo(prev => {\r\n                return {\r\n                    ...prev,\r\n                    message: \"Only whole number bets allowed\"\r\n                }\r\n            })\r\n        } else {\r\n            deck = deck.length < 10 ? generateDeck() : deck;\r\n            dealCards(deck);\r\n            setGameInfo(prev => {\r\n                return {\r\n                    ...prev,\r\n                    currentBet: currentBet,\r\n                    gameOver: false,\r\n                    message: null\r\n                }\r\n            })\r\n            \r\n        }\r\n    }\r\n    return (\r\n        <div className=\"input-bet\">\r\n            <form onSubmit={placeBet}>\r\n                <input type=\"text\" placeholder=\"enter here to bet\" value={inputValue} onChange={updateBet}/>\r\n                <button onClick={placeBet}>Place Bet</button>\r\n            </form>\r\n        </div>\r\n        \r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}