{"ast":null,"code":"import _slicedToArray from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\src\\\\components\\\\states.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState, useEffect, createContext } from \"react\";\nimport { useContext, useMemo } from \"react\";\nimport { GlobalState } from \"./global_states/global_state\";\nimport { Pages } from \"./site_stuff/pages\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GlobalStateDefault(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(function () {\n    return {\n      provider: \"-\",\n      signer: \"-\",\n      signerAddress: \"-\",\n      balance: \"-\",\n      game: {\n        deck: [],\n        dealer: null,\n        player: null,\n        wallet: 0,\n        inputValue: '',\n        currentBet: null,\n        gameOver: false,\n        message: null\n      }\n    };\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentUserInfo = _useState2[0],\n      setCurrentUserInfo = _useState2[1];\n\n  useEffect(function () {\n    var newProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    setCurrentUserInfo({\n      provider: newProvider\n    });\n  }), [currentUserInfo.provider];\n  useEffect(function () {}), [currentUserInfo.signerAddress]; //   function Connect() {\n  //     const connectFunction = async () => {\n  //         const currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  //         await currProvider.send(\"eth_requestAccounts\", []);\n  //         const signer = currProvider.getSigner();\n  //         const signerAddress = await signer.getAddress();\n  //         const updatedStates = {\n  //             provider: currProvider,\n  //             signer: signer,\n  //             signerAddress: signerAddress,\n  //             balance: \"-\"\n  //         }\n  //       setCurrentUserInfo(updatedStates);\n  //     }\n  //     connectFunction();\n  // }\n\n  var globalStateValue = useMemo(function () {\n    return {\n      currentUserInfo: currentUserInfo,\n      setCurrentUserInfo: setCurrentUserInfo\n    };\n  }); // console.log(currentUserInfo)\n\n  console.log(globalStateValue);\n  return /*#__PURE__*/_jsxDEV(GlobalState.Provider, {\n    value: globalStateValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GlobalStateDefault, \"JZkU5oH92stFN2QUL3N+VY6sbw0=\");\n\n_c = GlobalStateDefault;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStateDefault\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/states.js"],"names":["React","useState","useEffect","createContext","useContext","useMemo","GlobalState","Pages","ethers","GlobalStateDefault","children","provider","signer","signerAddress","balance","game","deck","dealer","player","wallet","inputValue","currentBet","gameOver","message","currentUserInfo","setCurrentUserInfo","newProvider","providers","Web3Provider","window","ethereum","globalStateValue","console","log"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,QAAmD,OAAnD;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAGA,OAAO,SAASC,kBAAT,OAA2C;AAAA;;AAAA,MAAbC,QAAa,QAAbA,QAAa;;AAEhD,kBAA8CT,QAAQ,CAAC,YAAM;AAC3D,WAAO;AACHU,MAAAA,QAAQ,EAAE,GADP;AAEHC,MAAAA,MAAM,EAAE,GAFL;AAGHC,MAAAA,aAAa,EAAE,GAHZ;AAIHC,MAAAA,OAAO,EAAE,GAJN;AAKHC,MAAAA,IAAI,EAAE;AACFC,QAAAA,IAAI,EAAE,EADJ;AAEFC,QAAAA,MAAM,EAAE,IAFN;AAGFC,QAAAA,MAAM,EAAE,IAHN;AAIFC,QAAAA,MAAM,EAAE,CAJN;AAKFC,QAAAA,UAAU,EAAE,EALV;AAMFC,QAAAA,UAAU,EAAE,IANV;AAOFC,QAAAA,QAAQ,EAAE,KAPR;AAQFC,QAAAA,OAAO,EAAE;AARP;AALH,KAAP;AAgBD,GAjBqD,CAAtD;AAAA;AAAA,MAAOC,eAAP;AAAA,MAAwBC,kBAAxB;;AAmBAvB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMwB,WAAW,GAAG,IAAIlB,MAAM,CAACmB,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CAApB;AACAL,IAAAA,kBAAkB,CAAC;AAACd,MAAAA,QAAQ,EAAEe;AAAX,KAAD,CAAlB;AACD,GAHQ,CAAT,EAGI,CAACF,eAAe,CAACb,QAAjB,CAHJ;AAKAT,EAAAA,SAAS,CAAC,YAAM,CAEf,CAFQ,CAAT,EAEI,CAACsB,eAAe,CAACX,aAAjB,CAFJ,CA1BgD,CA8BlD;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEE,MAAMkB,gBAAgB,GAAG1B,OAAO,CAAC;AAAA,WAAO;AAAEmB,MAAAA,eAAe,EAAfA,eAAF;AAAmBC,MAAAA,kBAAkB,EAAlBA;AAAnB,KAAP;AAAA,GAAD,CAAhC,CAjDgD,CAkDhD;;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,gBAAZ;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEA,gBAA7B;AAAA,cACGrB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA3DeD,kB;;KAAAA,kB","sourcesContent":["import React from \"react\"\r\nimport { useState, useEffect, createContext } from \"react\";\r\nimport { useContext, useMemo } from \"react\";\r\nimport { GlobalState } from \"./global_states/global_state\";\r\nimport { Pages } from \"./site_stuff/pages\";\r\nimport { ethers } from \"ethers\";\r\n\r\n\r\nexport function GlobalStateDefault({ children })  {\r\n  \r\n  const [currentUserInfo, setCurrentUserInfo] = useState(() => {\r\n    return {\r\n        provider: \"-\",\r\n        signer: \"-\",\r\n        signerAddress: \"-\",\r\n        balance: \"-\",\r\n        game: {\r\n            deck: [],\r\n            dealer: null,\r\n            player: null,\r\n            wallet: 0,\r\n            inputValue: '',\r\n            currentBet: null,\r\n            gameOver: false,\r\n            message: null \r\n        }\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    const newProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n    setCurrentUserInfo({provider: newProvider});\r\n  }), [currentUserInfo.provider]\r\n\r\n  useEffect(() => {\r\n\r\n  }), [currentUserInfo.signerAddress]\r\n\r\n//   function Connect() {\r\n//     const connectFunction = async () => {\r\n//         const currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n//         await currProvider.send(\"eth_requestAccounts\", []);\r\n//         const signer = currProvider.getSigner();\r\n//         const signerAddress = await signer.getAddress();\r\n\r\n//         const updatedStates = {\r\n//             provider: currProvider,\r\n//             signer: signer,\r\n//             signerAddress: signerAddress,\r\n//             balance: \"-\"\r\n//         }\r\n    \r\n//       setCurrentUserInfo(updatedStates);\r\n//     }\r\n//     connectFunction();\r\n// }\r\n\r\n  const globalStateValue = useMemo(() => ({ currentUserInfo, setCurrentUserInfo}));\r\n  // console.log(currentUserInfo)\r\n  console.log(globalStateValue)\r\n\r\n  return (\r\n    <GlobalState.Provider value={globalStateValue}>\r\n      {children}\r\n    </GlobalState.Provider>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}