{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\src\\\\components\\\\functions\\\\ConnectState.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useContext } from \"react\";\nimport { GlobalState } from \"../global_states/global_state\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Connect() {\n  _s();\n\n  var _useContext = useContext(GlobalState),\n      currentUserInfo = _useContext.currentUserInfo,\n      setCurrentUserInfo = _useContext.setCurrentUserInfo;\n\n  var connectFunction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currProvider, signer, signerAddress, updatedStates;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n              _context.next = 3;\n              return currProvider.send(\"eth_requestAccounts\", []);\n\n            case 3:\n              signer = currProvider.getSigner();\n              _context.next = 6;\n              return signer.getAddress();\n\n            case 6:\n              signerAddress = _context.sent;\n              updatedStates = {\n                provider: currProvider,\n                signer: signer,\n                signerAddress: signerAddress,\n                balance: \"-\"\n              };\n              setCurrentUserInfo(updatedStates);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function connectFunction() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  connectFunction();\n  return /*#__PURE__*/_jsxDEV(MyContext.Consumer, {\n    children: Connect()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Connect, \"+1Ns/fMjUO8Lc3KOOnStFGYoViI=\");\n\n_c = Connect;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/functions/ConnectState.js"],"names":["useContext","GlobalState","ethers","Connect","currentUserInfo","setCurrentUserInfo","connectFunction","currProvider","providers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","signerAddress","updatedStates","provider","balance"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAIA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACtB,oBAAgDH,UAAU,CAACC,WAAD,CAA1D;AAAA,MAAQG,eAAR,eAAQA,eAAR;AAAA,MAAyBC,kBAAzB,eAAyBA,kBAAzB;;AAEA,MAAMC,eAAe;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,cAAAA,YADc,GACC,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CADD;AAAA;AAAA,qBAEdJ,YAAY,CAACK,IAAb,CAAkB,qBAAlB,EAAyC,EAAzC,CAFc;;AAAA;AAGdC,cAAAA,MAHc,GAGLN,YAAY,CAACO,SAAb,EAHK;AAAA;AAAA,qBAIQD,MAAM,CAACE,UAAP,EAJR;;AAAA;AAIdC,cAAAA,aAJc;AAMdC,cAAAA,aANc,GAME;AAClBC,gBAAAA,QAAQ,EAAEX,YADQ;AAElBM,gBAAAA,MAAM,EAAEA,MAFU;AAGlBG,gBAAAA,aAAa,EAAEA,aAHG;AAIlBG,gBAAAA,OAAO,EAAE;AAJS,eANF;AAaxBd,cAAAA,kBAAkB,CAACY,aAAD,CAAlB;;AAbwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfX,eAAe;AAAA;AAAA;AAAA,KAArB;;AAeAA,EAAAA,eAAe;AAEf,sBACI,QAAC,SAAD,CAAW,QAAX;AAAA,cACKH,OAAO;AADZ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAzBeA,O;;KAAAA,O","sourcesContent":["import { useContext } from \"react\";\r\nimport { GlobalState } from \"../global_states/global_state\";\r\nimport { ethers } from \"ethers\";\r\n\r\n\r\n\r\nexport function Connect() {\r\n    const { currentUserInfo, setCurrentUserInfo } = useContext(GlobalState);\r\n\r\n    const connectFunction = async () => {\r\n        const currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        await currProvider.send(\"eth_requestAccounts\", []);\r\n        const signer = currProvider.getSigner();\r\n        const signerAddress = await signer.getAddress();\r\n\r\n        const updatedStates = {\r\n            provider: currProvider,\r\n            signer: signer,\r\n            signerAddress: signerAddress,\r\n            balance: \"-\"\r\n        }\r\n    \r\n    setCurrentUserInfo(updatedStates);\r\n    }\r\n    connectFunction();\r\n\r\n    return (\r\n        <MyContext.Consumer>\r\n            {Connect()}\r\n        </MyContext.Consumer>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}