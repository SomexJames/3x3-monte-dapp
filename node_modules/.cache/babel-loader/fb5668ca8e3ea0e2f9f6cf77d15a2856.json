{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { useState, useEffect, useContext } from \"react\";\nimport { ethers } from \"ethers\";\nimport { GlobalState } from \"./global_state\";\nimport { GamePage } from \"./site_stuff/game_page\";\nimport { Pages } from \"./site_stuff/pages\";\nexport function Connect() {\n  _s();\n\n  var _useContext = useContext(GlobalState),\n      currentUserInfo = _useContext.currentUserInfo,\n      setCurrentUserInfo = _useContext.setCurrentUserInfo;\n\n  var OnConnect = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currProvider, signer, signerAddress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n              _context.next = 3;\n              return currProvider.send(\"eth_requestAccounts\", []);\n\n            case 3:\n              signer = currProvider.getSigner();\n              _context.next = 6;\n              return signer.getAddress();\n\n            case 6:\n              signerAddress = _context.sent;\n              return _context.abrupt(\"return\", {\n                provider: currProvider,\n                signer: signer,\n                signerAddress: signerAddress,\n                balance: \"-\"\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function OnConnect() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  setCurrentUserInfo(OnConnect);\n}\n\n_s(Connect, \"bE6/tZHQ9+QtIU1ZaUWzgeO9mMk=\");\n\n_c = Connect;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/updated_states.js"],"names":["useState","useEffect","useContext","ethers","GlobalState","GamePage","Pages","Connect","currentUserInfo","setCurrentUserInfo","OnConnect","currProvider","providers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","signerAddress","provider","balance"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACtB,oBAA8CL,UAAU,CAACE,WAAD,CAAxD;AAAA,MAAOI,eAAP,eAAOA,eAAP;AAAA,MAAwBC,kBAAxB,eAAwBA,kBAAxB;;AACA,MAAMC,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,cAAAA,YADQ,GACO,IAAIR,MAAM,CAACS,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CADP;AAAA;AAAA,qBAERJ,YAAY,CAACK,IAAb,CAAkB,qBAAlB,EAAyC,EAAzC,CAFQ;;AAAA;AAGRC,cAAAA,MAHQ,GAGCN,YAAY,CAACO,SAAb,EAHD;AAAA;AAAA,qBAIcD,MAAM,CAACE,UAAP,EAJd;;AAAA;AAIRC,cAAAA,aAJQ;AAAA,+CAKN;AACJC,gBAAAA,QAAQ,EAAEV,YADN;AAEJM,gBAAAA,MAAM,EAAEA,MAFJ;AAGJG,gBAAAA,aAAa,EAAEA,aAHX;AAIJE,gBAAAA,OAAO,EAAE;AAJL,eALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATZ,SAAS;AAAA;AAAA;AAAA,KAAf;;AAaAD,EAAAA,kBAAkB,CAACC,SAAD,CAAlB;AAEH;;GAjBeH,O;;KAAAA,O","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { GlobalState } from \"./global_state\"\r\nimport { GamePage } from \"./site_stuff/game_page\";\r\nimport { Pages } from \"./site_stuff/pages\";\r\n\r\nexport function Connect() {\r\n    const {currentUserInfo, setCurrentUserInfo} = useContext(GlobalState);\r\n    const OnConnect = async () => {\r\n        const currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        await currProvider.send(\"eth_requestAccounts\", []);\r\n        const signer = currProvider.getSigner();\r\n        const signerAddress = await signer.getAddress();\r\n        return ({\r\n            provider: currProvider,\r\n            signer: signer,\r\n            signerAddress: signerAddress,\r\n            balance: \"-\"\r\n        })\r\n    }\r\n        \r\n    setCurrentUserInfo(OnConnect);\r\n    \r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}