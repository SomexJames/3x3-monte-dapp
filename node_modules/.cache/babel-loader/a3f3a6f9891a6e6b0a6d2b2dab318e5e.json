{"ast":null,"code":"import _objectSpread from\"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\Brandon\\\\Projects\\\\3x3-monte-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{ethers}from\"ethers\";import{useContext}from\"react\";import{GlobalState}from\"../global_states/global_state\";import{handleEthAccReq}from\"../functions/handleEthAccReq\";import erc20abi from\"../../ERC20abi.json\";import{jsx as _jsx}from\"react/jsx-runtime\";export function UpdateUser(prop){var _useContext=useContext(GlobalState),currentUserInfo=_useContext.currentUserInfo,setCurrentUserInfo=_useContext.setCurrentUserInfo,accReqPending=_useContext.accReqPending,setAccReqPending=_useContext.setAccReqPending;var contractAddress=currentUserInfo.contractAddress;var provider=currentUserInfo.provider;var signer=currentUserInfo.signer;var signerAddress=currentUserInfo.signerAddress;var erc20=currentUserInfo.erc20;var updateUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ethReqP;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(window.ethereum){_context.next=3;break;}throw new Error('No crypto wallet found. Please install \"MetaMask\" in the Chrome Extensions Store');case 3:_context.next=8;break;case 5:_context.prev=5;_context.t0=_context[\"catch\"](0);alert(_context.t0);case 8:provider=new ethers.providers.Web3Provider(window.ethereum,\"any\");if(accReqPending===null){setAccReqPending(true);}_context.next=12;return handleEthAccReq();case 12:_ethReqP=_context.sent;if(_ethReqP){_context.next=18;break;}sessionStorage.setItem(accReqPending,true);setAccReqPending(true);_context.next=26;break;case 18:signer=provider.getSigner();_context.next=21;return signer.getAddress().catch(function(e){return console.log(e);});case 21:signerAddress=_context.sent;erc20=new ethers.Contract(contractAddress,erc20abi,signer);sessionStorage.setItem(accReqPending,false);setAccReqPending(false);setCurrentUserInfo(function(prev){return _objectSpread(_objectSpread({},prev),{},{provider:provider,signer:signer,signerAddress:signerAddress,erc20:erc20});});case 26:case\"end\":return _context.stop();}}},_callee,null,[[0,5]]);}));return function updateUser(){return _ref.apply(this,arguments);};}();if(prop.prop==\"connect\"){return/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:function onClick(){return updateUser();},children:\"Connect\"});}else if(prop.prop==\"retry\"){return/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:function onClick(){return updateUser();},children:\"Retry\"});}else{return/*#__PURE__*/_jsx(\"button\",{className:\"button\",onClick:function onClick(){return updateUser();},children:\"!Error\"});}}","map":{"version":3,"sources":["C:/Users/Brandon/Projects/3x3-monte-dapp/src/components/buttons/updateUser.js"],"names":["ethers","useContext","GlobalState","handleEthAccReq","erc20abi","UpdateUser","prop","currentUserInfo","setCurrentUserInfo","accReqPending","setAccReqPending","contractAddress","provider","signer","signerAddress","erc20","updateUser","window","ethereum","Error","alert","providers","Web3Provider","_ethReqP","sessionStorage","setItem","getSigner","getAddress","catch","e","console","log","Contract","prev"],"mappings":"qYAAA,OAASA,MAAT,KAAuB,QAAvB,CACA,OAASC,UAAT,KAA2B,OAA3B,CACA,OAASC,WAAT,KAA4B,+BAA5B,CACA,OAASC,eAAT,KAAgC,8BAAhC,CACA,MAAOC,CAAAA,QAAP,KAAqB,qBAArB,C,2CAEA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,IAApB,CAA0B,CAC7B,gBAAiFL,UAAU,CAACC,WAAD,CAA3F,CAAQK,eAAR,aAAQA,eAAR,CAAyBC,kBAAzB,aAAyBA,kBAAzB,CAA6CC,aAA7C,aAA6CA,aAA7C,CAA4DC,gBAA5D,aAA4DA,gBAA5D,CACA,GAAMC,CAAAA,eAAe,CAAGJ,eAAe,CAACI,eAAxC,CACA,GAAIC,CAAAA,QAAQ,CAAGL,eAAe,CAACK,QAA/B,CACA,GAAIC,CAAAA,MAAM,CAAGN,eAAe,CAACM,MAA7B,CACA,GAAIC,CAAAA,aAAa,CAAGP,eAAe,CAACO,aAApC,CACA,GAAIC,CAAAA,KAAK,CAAGR,eAAe,CAACQ,KAA5B,CACA,GAAMC,CAAAA,UAAU,0FAAG,mKAENC,MAAM,CAACC,QAFD,8BAGD,IAAIC,CAAAA,KAAJ,CAAU,kFAAV,CAHC,sFAKXC,KAAK,aAAL,CALW,OAOfR,QAAQ,CAAG,GAAIZ,CAAAA,MAAM,CAACqB,SAAP,CAAiBC,YAArB,CAAkCL,MAAM,CAACC,QAAzC,CAAmD,KAAnD,CAAX,CACA,GAAIT,aAAa,GAAK,IAAtB,CAA4B,CACxBC,gBAAgB,CAAC,IAAD,CAAhB,CACH,CAVc,uBAWQP,CAAAA,eAAe,EAXvB,SAWToB,QAXS,kBAYVA,QAZU,0BAaXC,cAAc,CAACC,OAAf,CAAuBhB,aAAvB,CAAsC,IAAtC,EACAC,gBAAgB,CAAC,IAAD,CAAhB,CAdW,+BAgBXG,MAAM,CAAGD,QAAQ,CAACc,SAAT,EAAT,CAhBW,uBAiBWb,CAAAA,MAAM,CAACc,UAAP,GAAoBC,KAApB,CAA0B,SAAAC,CAAC,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAJ,EAA3B,CAjBX,SAiBXf,aAjBW,eAkBXC,KAAK,CAAG,GAAIf,CAAAA,MAAM,CAACgC,QAAX,CAAoBrB,eAApB,CAAqCP,QAArC,CAA+CS,MAA/C,CAAR,CACAW,cAAc,CAACC,OAAf,CAAuBhB,aAAvB,CAAsC,KAAtC,EACAC,gBAAgB,CAAC,KAAD,CAAhB,CACAF,kBAAkB,CAAC,SAAAyB,IAAI,CAAI,CACnB,sCACOA,IADP,MAEIrB,QAAQ,CAARA,QAFJ,CAGIC,MAAM,CAANA,MAHJ,CAIIC,aAAa,CAAbA,aAJJ,CAKIC,KAAK,CAALA,KALJ,GAOH,CARa,CAAlB,CArBW,oEAAH,kBAAVC,CAAAA,UAAU,0CAAhB,CAiCA,GAAIV,IAAI,CAACA,IAAL,EAAa,SAAjB,CAA4B,CACxB,mBACI,eAAQ,SAAS,CAAC,QAAlB,CAA2B,OAAO,CAAE,yBAAMU,CAAAA,UAAU,EAAhB,EAApC,qBADJ,CAGH,CAJD,IAKK,IAAIV,IAAI,CAACA,IAAL,EAAa,OAAjB,CAA0B,CAC3B,mBACI,eAAQ,SAAS,CAAC,QAAlB,CAA2B,OAAO,CAAE,yBAAMU,CAAAA,UAAU,EAAhB,EAApC,mBADJ,CAGH,CAJI,IAKA,CACD,mBACI,eAAQ,SAAS,CAAC,QAAlB,CAA2B,OAAO,CAAE,yBAAMA,CAAAA,UAAU,EAAhB,EAApC,oBADJ,CAGH,CACJ","sourcesContent":["import { ethers } from \"ethers\"\r\nimport { useContext } from \"react\";\r\nimport { GlobalState } from \"../global_states/global_state\";\r\nimport { handleEthAccReq } from \"../functions/handleEthAccReq\";\r\nimport erc20abi from \"../../ERC20abi.json\"\r\n\r\nexport function UpdateUser(prop) {\r\n    const { currentUserInfo, setCurrentUserInfo, accReqPending, setAccReqPending } = useContext(GlobalState);\r\n    const contractAddress = currentUserInfo.contractAddress;\r\n    var provider = currentUserInfo.provider;\r\n    var signer = currentUserInfo.signer;\r\n    var signerAddress = currentUserInfo.signerAddress;\r\n    var erc20 = currentUserInfo.erc20;\r\n    const updateUser = async () => {\r\n        try {\r\n            if (!window.ethereum)\r\n                throw new Error('No crypto wallet found. Please install \"MetaMask\" in the Chrome Extensions Store')\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n        provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        if (accReqPending === null) {\r\n            setAccReqPending(true);\r\n        }\r\n        const _ethReqP = await handleEthAccReq();\r\n        if (!_ethReqP) {\r\n            sessionStorage.setItem(accReqPending, true);\r\n            setAccReqPending(true);\r\n        } else {\r\n            signer = provider.getSigner();\r\n            signerAddress = await signer.getAddress().catch(e => console.log(e));\r\n            erc20 = new ethers.Contract(contractAddress, erc20abi, signer);\r\n            sessionStorage.setItem(accReqPending, false);\r\n            setAccReqPending(false);\r\n            setCurrentUserInfo(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        provider,\r\n                        signer,\r\n                        signerAddress,\r\n                        erc20\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n    if (prop.prop == \"connect\") {\r\n        return (\r\n            <button className=\"button\" onClick={() => updateUser()}>Connect</button>\r\n        )\r\n    }\r\n    else if (prop.prop == \"retry\") {\r\n        return (\r\n            <button className=\"button\" onClick={() => updateUser()}>Retry</button>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <button className=\"button\" onClick={() => updateUser()}>!Error</button>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}