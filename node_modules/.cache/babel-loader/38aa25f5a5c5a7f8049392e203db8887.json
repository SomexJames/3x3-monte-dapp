{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nvar defaultProjectId = \"84842078b09946638c03157f83405213\";\nexport var InfuraWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(InfuraWebSocketProvider, _WebSocketProvider);\n\n  var _super = _createSuper(InfuraWebSocketProvider);\n\n  function InfuraWebSocketProvider(network, apiKey) {\n    var _this;\n\n    _classCallCheck(this, InfuraWebSocketProvider);\n\n    var provider = new InfuraProvider(network, apiKey);\n    var connection = provider.connection;\n\n    if (connection.password) {\n      logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"InfuraProvider.getWebSocketProvider()\"\n      });\n    }\n\n    var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    _this = _super.call(this, url, network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectId\", provider.projectId);\n    defineReadOnly(_assertThisInitialized(_this), \"projectSecret\", provider.projectSecret);\n    return _this;\n  }\n\n  _createClass(InfuraWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }]);\n\n  return InfuraWebSocketProvider;\n}(WebSocketProvider);\nexport var InfuraProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(InfuraProvider, _UrlJsonRpcProvider);\n\n  var _super2 = _createSuper(InfuraProvider);\n\n  function InfuraProvider() {\n    _classCallCheck(this, InfuraProvider);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(InfuraProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.projectId === defaultProjectId;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new InfuraWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      var apiKeyObj = {\n        apiKey: defaultProjectId,\n        projectId: defaultProjectId,\n        projectSecret: null\n      };\n\n      if (apiKey == null) {\n        return apiKeyObj;\n      }\n\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.projectId = apiKey;\n      } else if (apiKey.projectSecret != null) {\n        logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n        logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n        apiKeyObj.projectId = apiKey.projectId;\n        apiKeyObj.projectSecret = apiKey.projectSecret;\n      } else if (apiKey.projectId) {\n        apiKeyObj.projectId = apiKey.projectId;\n      }\n\n      apiKeyObj.apiKey = apiKeyObj.projectId;\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"mainnet.infura.io\";\n          break;\n\n        case \"ropsten\":\n          host = \"ropsten.infura.io\";\n          break;\n\n        case \"rinkeby\":\n          host = \"rinkeby.infura.io\";\n          break;\n\n        case \"kovan\":\n          host = \"kovan.infura.io\";\n          break;\n\n        case \"goerli\":\n          host = \"goerli.infura.io\";\n          break;\n\n        case \"matic\":\n          host = \"polygon-mainnet.infura.io\";\n          break;\n\n        case \"maticmum\":\n          host = \"polygon-mumbai.infura.io\";\n          break;\n\n        case \"optimism\":\n          host = \"optimism-mainnet.infura.io\";\n          break;\n\n        case \"optimism-kovan\":\n          host = \"optimism-kovan.infura.io\";\n          break;\n\n        case \"arbitrum\":\n          host = \"arbitrum-mainnet.infura.io\";\n          break;\n\n        case \"arbitrum-rinkeby\":\n          host = \"arbitrum-rinkeby.infura.io\";\n          break;\n\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n\n      var connection = {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey.projectId === defaultProjectId) {\n            showThrottleMessage();\n          }\n\n          return Promise.resolve(true);\n        }\n      };\n\n      if (apiKey.projectSecret != null) {\n        connection.user = \"\";\n        connection.password = apiKey.projectSecret;\n      }\n\n      return connection;\n    }\n  }]);\n\n  return InfuraProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"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","names":["defineReadOnly","WebSocketProvider","showThrottleMessage","Logger","version","logger","UrlJsonRpcProvider","defaultProjectId","InfuraWebSocketProvider","network","apiKey","provider","InfuraProvider","connection","password","throwError","errors","UNSUPPORTED_OPERATION","operation","url","replace","projectId","projectSecret","apiKeyObj","assertArgument","host","name","INVALID_ARGUMENT","argument","value","allowGzip","throttleCallback","attempt","Promise","resolve","user"],"sources":["C:\\Users\\Brandon\\Projects\\3x3-monte-dapp\\node_modules\\@ethersproject\\providers\\src.ts\\infura-provider.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { Network, Networkish } from \"@ethersproject/networks\";\r\nimport { defineReadOnly } from \"@ethersproject/properties\";\r\nimport { ConnectionInfo } from \"@ethersproject/web\";\r\n\r\nimport { WebSocketProvider } from \"./websocket-provider\";\r\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\r\n\r\n\r\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\r\n\r\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\r\n    readonly apiKey: string;\r\n    readonly projectId: string;\r\n    readonly projectSecret: string;\r\n\r\n    constructor(network?: Networkish, apiKey?: any) {\r\n        const provider = new InfuraProvider(network, apiKey);\r\n        const connection = provider.connection;\r\n        if (connection.password) {\r\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\r\n                operation: \"InfuraProvider.getWebSocketProvider()\"\r\n            });\r\n        }\r\n\r\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\r\n        super(url, network);\r\n\r\n        defineReadOnly(this, \"apiKey\", provider.projectId);\r\n        defineReadOnly(this, \"projectId\", provider.projectId);\r\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.projectId === defaultProjectId);\r\n    }\r\n}\r\n\r\nexport class InfuraProvider extends UrlJsonRpcProvider {\r\n    readonly projectId: string;\r\n    readonly projectSecret: string;\r\n\r\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\r\n        return new InfuraWebSocketProvider(network, apiKey);\r\n    }\r\n\r\n    static getApiKey(apiKey: any): any {\r\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\r\n            apiKey: defaultProjectId,\r\n            projectId: defaultProjectId,\r\n            projectSecret: null\r\n        };\r\n\r\n        if (apiKey == null) { return apiKeyObj; }\r\n\r\n        if (typeof(apiKey) === \"string\") {\r\n            apiKeyObj.projectId = apiKey;\r\n\r\n        } else if (apiKey.projectSecret != null) {\r\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\r\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\r\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\r\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\r\n\r\n            apiKeyObj.projectId = apiKey.projectId;\r\n            apiKeyObj.projectSecret = apiKey.projectSecret;\r\n\r\n        } else if (apiKey.projectId) {\r\n            apiKeyObj.projectId = apiKey.projectId;\r\n        }\r\n\r\n        apiKeyObj.apiKey = apiKeyObj.projectId;\r\n\r\n        return apiKeyObj;\r\n    }\r\n\r\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\r\n        let host: string = null;\r\n        switch(network ? network.name: \"unknown\") {\r\n            case \"homestead\":\r\n                host = \"mainnet.infura.io\";\r\n                break;\r\n            case \"ropsten\":\r\n                host = \"ropsten.infura.io\";\r\n                break;\r\n            case \"rinkeby\":\r\n                host = \"rinkeby.infura.io\";\r\n                break;\r\n            case \"kovan\":\r\n                host = \"kovan.infura.io\";\r\n                break;\r\n            case \"goerli\":\r\n                host = \"goerli.infura.io\";\r\n                break;\r\n            case \"matic\":\r\n                host = \"polygon-mainnet.infura.io\";\r\n                break;\r\n            case \"maticmum\":\r\n                host = \"polygon-mumbai.infura.io\";\r\n                break;\r\n            case \"optimism\":\r\n                host = \"optimism-mainnet.infura.io\";\r\n                break;\r\n            case \"optimism-kovan\":\r\n                host = \"optimism-kovan.infura.io\";\r\n                break;\r\n            case \"arbitrum\":\r\n                host = \"arbitrum-mainnet.infura.io\";\r\n                break;\r\n            case \"arbitrum-rinkeby\":\r\n                host = \"arbitrum-rinkeby.infura.io\";\r\n                break;\r\n            default:\r\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\r\n                    argument: \"network\",\r\n                    value: network\r\n                });\r\n        }\r\n\r\n        const connection: ConnectionInfo = {\r\n            allowGzip: true,\r\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\r\n            throttleCallback: (attempt: number, url: string) => {\r\n                if (apiKey.projectId === defaultProjectId) {\r\n                    showThrottleMessage();\r\n                }\r\n                return Promise.resolve(true);\r\n            }\r\n        };\r\n\r\n        if (apiKey.projectSecret != null) {\r\n            connection.user = \"\";\r\n            connection.password = apiKey.projectSecret\r\n        }\r\n\r\n        return connection;\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.projectId === defaultProjectId);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}