{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Brandon\\\\Projects\\\\3x3-monte-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\n; //export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport var ForkEvent = /*#__PURE__*/function (_Description) {\n  _inherits(ForkEvent, _Description);\n\n  var _super = _createSuper(ForkEvent);\n\n  function ForkEvent() {\n    _classCallCheck(this, ForkEvent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ForkEvent, null, [{\n    key: \"isForkEvent\",\n    value: function isForkEvent(value) {\n      return !!(value && value._isForkEvent);\n    }\n  }]);\n\n  return ForkEvent;\n}(Description);\nexport var BlockForkEvent = /*#__PURE__*/function (_ForkEvent) {\n  _inherits(BlockForkEvent, _ForkEvent);\n\n  var _super2 = _createSuper(BlockForkEvent);\n\n  function BlockForkEvent(blockHash, expiry) {\n    _classCallCheck(this, BlockForkEvent);\n\n    if (!isHexString(blockHash, 32)) {\n      logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n    }\n\n    return _super2.call(this, {\n      _isForkEvent: true,\n      _isBlockForkEvent: true,\n      expiry: expiry || 0,\n      blockHash: blockHash\n    });\n  }\n\n  return _createClass(BlockForkEvent);\n}(ForkEvent);\nexport var TransactionForkEvent = /*#__PURE__*/function (_ForkEvent2) {\n  _inherits(TransactionForkEvent, _ForkEvent2);\n\n  var _super3 = _createSuper(TransactionForkEvent);\n\n  function TransactionForkEvent(hash, expiry) {\n    _classCallCheck(this, TransactionForkEvent);\n\n    if (!isHexString(hash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n    }\n\n    return _super3.call(this, {\n      _isForkEvent: true,\n      _isTransactionForkEvent: true,\n      expiry: expiry || 0,\n      hash: hash\n    });\n  }\n\n  return _createClass(TransactionForkEvent);\n}(ForkEvent);\nexport var TransactionOrderForkEvent = /*#__PURE__*/function (_ForkEvent3) {\n  _inherits(TransactionOrderForkEvent, _ForkEvent3);\n\n  var _super4 = _createSuper(TransactionOrderForkEvent);\n\n  function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {\n    _classCallCheck(this, TransactionOrderForkEvent);\n\n    if (!isHexString(beforeHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n    }\n\n    if (!isHexString(afterHash, 32)) {\n      logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n    }\n\n    return _super4.call(this, {\n      _isForkEvent: true,\n      _isTransactionOrderForkEvent: true,\n      expiry: expiry || 0,\n      beforeHash: beforeHash,\n      afterHash: afterHash\n    });\n  }\n\n  return _createClass(TransactionOrderForkEvent);\n}(ForkEvent); ///////////////////////////////\n// Exported Abstracts\n\nexport var Provider = /*#__PURE__*/function () {\n  function Provider() {\n    _classCallCheck(this, Provider);\n\n    logger.checkAbstract(this instanceof Provider ? this.constructor : void 0, Provider);\n    defineReadOnly(this, \"_isProvider\", true);\n  }\n\n  _createClass(Provider, [{\n    key: \"getFeeData\",\n    value: function getFeeData() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _yield$resolvePropert, block, gasPrice, maxFeePerGas, maxPriorityFeePerGas;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return resolveProperties({\n                  block: this.getBlock(\"latest\"),\n                  gasPrice: this.getGasPrice().catch(function (error) {\n                    // @TODO: Why is this now failing on Calaveras?\n                    //console.log(error);\n                    return null;\n                  })\n                });\n\n              case 2:\n                _yield$resolvePropert = _context.sent;\n                block = _yield$resolvePropert.block;\n                gasPrice = _yield$resolvePropert.gasPrice;\n                maxFeePerGas = null, maxPriorityFeePerGas = null;\n\n                if (block && block.baseFeePerGas) {\n                  // We may want to compute this more accurately in the future,\n                  // using the formula \"check if the base fee is correct\".\n                  // See: https://eips.ethereum.org/EIPS/eip-1559\n                  maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\n                  maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n                }\n\n                return _context.abrupt(\"return\", {\n                  maxFeePerGas: maxFeePerGas,\n                  maxPriorityFeePerGas: maxPriorityFeePerGas,\n                  gasPrice: gasPrice\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    } // Alias for \"on\"\n\n  }, {\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      return this.on(eventName, listener);\n    } // Alias for \"off\"\n\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      return this.off(eventName, listener);\n    }\n  }], [{\n    key: \"isProvider\",\n    value: function isProvider(value) {\n      return !!(value && value._isProvider);\n    }\n  }]);\n\n  return Provider;\n}();","map":{"version":3,"mappings":"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","names":["BigNumber","isHexString","Description","defineReadOnly","resolveProperties","Logger","version","logger","ForkEvent","value","_isForkEvent","BlockForkEvent","blockHash","expiry","throwArgumentError","_isBlockForkEvent","TransactionForkEvent","hash","_isTransactionForkEvent","TransactionOrderForkEvent","beforeHash","afterHash","_isTransactionOrderForkEvent","Provider","checkAbstract","block","getBlock","gasPrice","getGasPrice","catch","error","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","from","mul","add","eventName","listener","on","off","_isProvider"],"sources":["C:\\Users\\Brandon\\Projects\\3x3-monte-dapp\\node_modules\\@ethersproject\\abstract-provider\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\r\n\r\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\r\nimport { BytesLike, isHexString } from \"@ethersproject/bytes\";\r\nimport { Network } from \"@ethersproject/networks\";\r\nimport { Deferrable, Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\r\nimport { AccessListish, Transaction } from \"@ethersproject/transactions\";\r\nimport { OnceBlockable } from \"@ethersproject/web\";\r\n\r\nimport { Logger } from \"@ethersproject/logger\";\r\nimport { version } from \"./_version\";\r\nconst logger = new Logger(version);\r\n\r\n///////////////////////////////\r\n// Exported Types\r\n\r\n\r\nexport type TransactionRequest = {\r\n    to?: string,\r\n    from?: string,\r\n    nonce?: BigNumberish,\r\n\r\n    gasLimit?: BigNumberish,\r\n    gasPrice?: BigNumberish,\r\n\r\n    data?: BytesLike,\r\n    value?: BigNumberish,\r\n    chainId?: number\r\n\r\n    type?: number;\r\n    accessList?: AccessListish;\r\n\r\n    maxPriorityFeePerGas?: BigNumberish;\r\n    maxFeePerGas?: BigNumberish;\r\n\r\n    customData?: Record<string, any>;\r\n    ccipReadEnabled?: boolean;\r\n}\r\n\r\nexport interface TransactionResponse extends Transaction {\r\n    hash: string;\r\n\r\n    // Only if a transaction has been mined\r\n    blockNumber?: number,\r\n    blockHash?: string,\r\n    timestamp?: number,\r\n\r\n    confirmations: number,\r\n\r\n    // Not optional (as it is in Transaction)\r\n    from: string;\r\n\r\n    // The raw transaction\r\n    raw?: string,\r\n\r\n    // This function waits until the transaction has been mined\r\n    wait: (confirmations?: number) => Promise<TransactionReceipt>\r\n};\r\n\r\nexport type BlockTag = string | number;\r\n\r\nexport interface _Block {\r\n    hash: string;\r\n    parentHash: string;\r\n    number: number;\r\n\r\n    timestamp: number;\r\n    nonce: string;\r\n    difficulty: number;\r\n    _difficulty: BigNumber;\r\n\r\n    gasLimit: BigNumber;\r\n    gasUsed: BigNumber;\r\n\r\n    miner: string;\r\n    extraData: string;\r\n\r\n    baseFeePerGas?: null | BigNumber;\r\n}\r\n\r\nexport interface Block extends _Block {\r\n    transactions: Array<string>;\r\n}\r\n\r\nexport interface BlockWithTransactions extends _Block {\r\n    transactions: Array<TransactionResponse>;\r\n}\r\n\r\n\r\nexport interface Log {\r\n    blockNumber: number;\r\n    blockHash: string;\r\n    transactionIndex: number;\r\n\r\n    removed: boolean;\r\n\r\n    address: string;\r\n    data: string;\r\n\r\n    topics: Array<string>;\r\n\r\n    transactionHash: string;\r\n    logIndex: number;\r\n}\r\n\r\nexport interface TransactionReceipt {\r\n    to: string;\r\n    from: string;\r\n    contractAddress: string,\r\n    transactionIndex: number,\r\n    root?: string,\r\n    gasUsed: BigNumber,\r\n    logsBloom: string,\r\n    blockHash: string,\r\n    transactionHash: string,\r\n    logs: Array<Log>,\r\n    blockNumber: number,\r\n    confirmations: number,\r\n    cumulativeGasUsed: BigNumber,\r\n    effectiveGasPrice: BigNumber,\r\n    byzantium: boolean,\r\n    type: number;\r\n    status?: number\r\n};\r\n\r\nexport interface FeeData {\r\n    maxFeePerGas: null | BigNumber;\r\n    maxPriorityFeePerGas: null | BigNumber;\r\n    gasPrice: null | BigNumber;\r\n}\r\n\r\nexport interface EventFilter {\r\n    address?: string;\r\n    topics?: Array<string | Array<string> | null>;\r\n}\r\n\r\nexport interface Filter extends EventFilter {\r\n    fromBlock?: BlockTag,\r\n    toBlock?: BlockTag,\r\n}\r\n\r\nexport interface FilterByBlockHash extends EventFilter {\r\n    blockHash?: string;\r\n}\r\n\r\n//export type CallTransactionable = {\r\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\r\n//};\r\n\r\nexport abstract class ForkEvent extends Description {\r\n    readonly expiry: number;\r\n\r\n    readonly _isForkEvent?: boolean;\r\n\r\n    static isForkEvent(value: any): value is ForkEvent {\r\n        return !!(value && value._isForkEvent);\r\n    }\r\n}\r\n\r\nexport class BlockForkEvent extends ForkEvent {\r\n    readonly blockHash: string;\r\n\r\n    readonly _isBlockForkEvent?: boolean;\r\n\r\n    constructor(blockHash: string, expiry?: number) {\r\n        if (!isHexString(blockHash, 32)) {\r\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\r\n        }\r\n\r\n        super({\r\n            _isForkEvent: true,\r\n            _isBlockForkEvent: true,\r\n            expiry: (expiry || 0),\r\n            blockHash: blockHash\r\n        });\r\n    }\r\n}\r\n\r\nexport class TransactionForkEvent extends ForkEvent {\r\n    readonly hash: string;\r\n\r\n    readonly _isTransactionOrderForkEvent?: boolean;\r\n\r\n    constructor(hash: string, expiry?: number) {\r\n        if (!isHexString(hash, 32)) {\r\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\r\n        }\r\n\r\n        super({\r\n            _isForkEvent: true,\r\n            _isTransactionForkEvent: true,\r\n            expiry: (expiry || 0),\r\n            hash: hash\r\n        });\r\n    }\r\n}\r\n\r\nexport class TransactionOrderForkEvent extends ForkEvent {\r\n    readonly beforeHash: string;\r\n    readonly afterHash: string;\r\n\r\n    constructor(beforeHash: string, afterHash: string, expiry?: number) {\r\n        if (!isHexString(beforeHash, 32)) {\r\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\r\n        }\r\n        if (!isHexString(afterHash, 32)) {\r\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\r\n        }\r\n\r\n        super({\r\n            _isForkEvent: true,\r\n            _isTransactionOrderForkEvent: true,\r\n            expiry: (expiry || 0),\r\n            beforeHash: beforeHash,\r\n            afterHash: afterHash\r\n        });\r\n    }\r\n}\r\n\r\nexport type EventType = string | Array<string | Array<string>> | EventFilter | ForkEvent;\r\n\r\nexport type Listener = (...args: Array<any>) => void;\r\n\r\n///////////////////////////////\r\n// Exported Abstracts\r\nexport abstract class Provider implements OnceBlockable {\r\n\r\n    // Network\r\n    abstract getNetwork(): Promise<Network>;\r\n\r\n    // Latest State\r\n    abstract getBlockNumber(): Promise<number>;\r\n    abstract getGasPrice(): Promise<BigNumber>;\r\n    async getFeeData(): Promise<FeeData> {\r\n        const { block, gasPrice } = await resolveProperties({\r\n            block: this.getBlock(\"latest\"),\r\n            gasPrice: this.getGasPrice().catch((error) => {\r\n                // @TODO: Why is this now failing on Calaveras?\r\n                //console.log(error);\r\n                return null;\r\n            })\r\n        });\r\n\r\n        let maxFeePerGas = null, maxPriorityFeePerGas = null;\r\n\r\n        if (block && block.baseFeePerGas) {\r\n            // We may want to compute this more accurately in the future,\r\n            // using the formula \"check if the base fee is correct\".\r\n            // See: https://eips.ethereum.org/EIPS/eip-1559\r\n            maxPriorityFeePerGas = BigNumber.from(\"1500000000\");\r\n            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\r\n        }\r\n\r\n        return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };\r\n    }\r\n\r\n    // Account\r\n    abstract getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber>;\r\n    abstract getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number>;\r\n    abstract getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> ;\r\n    abstract getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\r\n\r\n    // Execution\r\n    abstract sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>;\r\n    abstract call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\r\n    abstract estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;\r\n\r\n    // Queries\r\n    abstract getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block>;\r\n    abstract getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions>;\r\n    abstract getTransaction(transactionHash: string): Promise<TransactionResponse>;\r\n    abstract getTransactionReceipt(transactionHash: string): Promise<TransactionReceipt>;\r\n\r\n    // Bloom-filter Queries\r\n    abstract getLogs(filter: Filter): Promise<Array<Log>>;\r\n\r\n    // ENS\r\n    abstract resolveName(name: string | Promise<string>): Promise<null | string>;\r\n    abstract lookupAddress(address: string | Promise<string>): Promise<null | string>;\r\n\r\n    // Event Emitter (ish)\r\n    abstract on(eventName: EventType, listener: Listener): Provider;\r\n    abstract once(eventName: EventType, listener: Listener): Provider;\r\n    abstract emit(eventName: EventType, ...args: Array<any>): boolean\r\n    abstract listenerCount(eventName?: EventType): number;\r\n    abstract listeners(eventName?: EventType): Array<Listener>;\r\n    abstract off(eventName: EventType, listener?: Listener): Provider;\r\n    abstract removeAllListeners(eventName?: EventType): Provider;\r\n\r\n    // Alias for \"on\"\r\n    addListener(eventName: EventType, listener: Listener): Provider {\r\n        return this.on(eventName, listener);\r\n    }\r\n\r\n    // Alias for \"off\"\r\n    removeListener(eventName: EventType, listener: Listener): Provider {\r\n        return this.off(eventName, listener);\r\n    }\r\n\r\n    // @TODO: This *could* be implemented here, but would pull in events...\r\n    abstract waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt>;\r\n\r\n    readonly _isProvider: boolean;\r\n\r\n    constructor() {\r\n        logger.checkAbstract(new.target, Provider);\r\n        defineReadOnly(this, \"_isProvider\", true);\r\n    }\r\n\r\n    static isProvider(value: any): value is Provider {\r\n        return !!(value && value._isProvider);\r\n    }\r\n\r\n/*\r\n    static getResolver(network: Network, callable: CallTransactionable, namehash: string): string {\r\n        // No ENS...\r\n        if (!network.ensAddress) {\r\n            errors.throwError(\r\n                \"network does support ENS\",\r\n                errors.UNSUPPORTED_OPERATION,\r\n                { operation: \"ENS\", network: network.name }\r\n            );\r\n        }\r\n\r\n        // Not a namehash\r\n        if (!isHexString(namehash, 32)) {\r\n            errors.throwArgumentError(\"invalid name hash\", \"namehash\", namehash);\r\n        }\r\n\r\n        // keccak256(\"resolver(bytes32)\")\r\n        let data = \"0x0178b8bf\" + namehash.substring(2);\r\n        let transaction = { to: network.ensAddress, data: data };\r\n\r\n        return provider.call(transaction).then((data) => {\r\n            return provider.formatter.callAddress(data);\r\n        });\r\n    }\r\n\r\n    static resolveNamehash(network: Network, callable: CallTransactionable, namehash: string): string {\r\n        return this.getResolver(network, callable, namehash).then((resolverAddress) => {\r\n            if (!resolverAddress) { return null; }\r\n\r\n            // keccak256(\"addr(bytes32)\")\r\n            let data = \"0x3b3b57de\" + namehash(name).substring(2);\r\n            let transaction = { to: resolverAddress, data: data };\r\n            return callable.call(transaction).then((data) => {\r\n                return this.formatter.callAddress(data);\r\n            });\r\n\r\n        })\r\n    }\r\n*/\r\n}\r\n"]},"metadata":{},"sourceType":"module"}