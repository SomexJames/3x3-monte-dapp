{"ast":null,"code":"import _classCallCheck from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/Brandon/Projects/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // Experimental\n\nexport var JsonRpcBatchProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(JsonRpcBatchProvider, _JsonRpcProvider);\n\n  var _super = _createSuper(JsonRpcBatchProvider);\n\n  function JsonRpcBatchProvider() {\n    _classCallCheck(this, JsonRpcBatchProvider);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(JsonRpcBatchProvider, [{\n    key: \"send\",\n    value: function send(method, params) {\n      var _this = this;\n\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n\n      if (this._pendingBatch == null) {\n        this._pendingBatch = [];\n      }\n\n      var inflightRequest = {\n        request: request,\n        resolve: null,\n        reject: null\n      };\n      var promise = new Promise(function (resolve, reject) {\n        inflightRequest.resolve = resolve;\n        inflightRequest.reject = reject;\n      });\n\n      this._pendingBatch.push(inflightRequest);\n\n      if (!this._pendingBatchAggregator) {\n        // Schedule batch for next event loop + short duration\n        this._pendingBatchAggregator = setTimeout(function () {\n          // Get teh current batch and clear it, so new requests\n          // go into the next batch\n          var batch = _this._pendingBatch;\n          _this._pendingBatch = null;\n          _this._pendingBatchAggregator = null; // Get the request as an array of requests\n\n          var request = batch.map(function (inflight) {\n            return inflight.request;\n          });\n\n          _this.emit(\"debug\", {\n            action: \"requestBatch\",\n            request: deepCopy(request),\n            provider: _this\n          });\n\n          return fetchJson(_this.connection, JSON.stringify(request)).then(function (result) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              request: request,\n              response: result,\n              provider: _this\n            }); // For each result, feed it to the correct Promise, depending\n            // on whether it was a success or error\n\n\n            batch.forEach(function (inflightRequest, index) {\n              var payload = result[index];\n\n              if (payload.error) {\n                var error = new Error(payload.error.message);\n                error.code = payload.error.code;\n                error.data = payload.error.data;\n                inflightRequest.reject(error);\n              } else {\n                inflightRequest.resolve(payload.result);\n              }\n            });\n          }, function (error) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              error: error,\n              request: request,\n              provider: _this\n            });\n\n            batch.forEach(function (inflightRequest) {\n              inflightRequest.reject(error);\n            });\n          });\n        }, 10);\n      }\n\n      return promise;\n    }\n  }]);\n\n  return JsonRpcBatchProvider;\n}(JsonRpcProvider);","map":{"version":3,"mappings":";;;;AACA,SAASA,QAAT,QAAyB,2BAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,SAASC,eAAT,QAAgC,qBAAhC,C,CAEA;;AAEA,WAAaC,oBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAQI,cAAKC,MAAL,EAAqBC,MAArB,EAAuC;AAAA;;AACnC,UAAMC,OAAO,GAAG;AACZF,cAAM,EAAEA,MADI;AAEZC,cAAM,EAAEA,MAFI;AAGZE,UAAE,EAAG,KAAKC,OAAL,EAHO;AAIZC,eAAO,EAAE;AAJG,OAAhB;;AAOA,UAAI,KAAKC,aAAL,IAAsB,IAA1B,EAAgC;AAC5B,aAAKA,aAAL,GAAqB,EAArB;AACH;;AAED,UAAMC,eAAe,GAAQ;AAAEL,eAAO,EAAPA,OAAF;AAAWM,eAAO,EAAE,IAApB;AAA0BC,cAAM,EAAE;AAAlC,OAA7B;AAEA,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACH,OAAD,EAAUC,MAAV,EAAoB;AAC5CF,uBAAe,CAACC,OAAhB,GAA0BA,OAA1B;AACAD,uBAAe,CAACE,MAAhB,GAAyBA,MAAzB;AACH,OAHe,CAAhB;;AAKA,WAAKH,aAAL,CAAmBM,IAAnB,CAAwBL,eAAxB;;AAEA,UAAI,CAAC,KAAKM,uBAAV,EAAmC;AAC/B;AACA,aAAKA,uBAAL,GAA+BC,UAAU,CAAC,YAAK;AAE3C;AACA;AACA,cAAMC,KAAK,GAAG,KAAI,CAACT,aAAnB;AACA,eAAI,CAACA,aAAL,GAAqB,IAArB;AACA,eAAI,CAACO,uBAAL,GAA+B,IAA/B,CAN2C,CAQ3C;;AACA,cAAMX,OAAO,GAAGa,KAAK,CAACC,GAAN,CAAU,UAACC,QAAD;AAAA,mBAAcA,QAAQ,CAACf,OAAvB;AAAA,WAAV,CAAhB;;AAEA,eAAI,CAACgB,IAAL,CAAU,OAAV,EAAmB;AACfC,kBAAM,EAAE,cADO;AAEfjB,mBAAO,EAAEN,QAAQ,CAACM,OAAD,CAFF;AAGfkB,oBAAQ,EAAE;AAHK,WAAnB;;AAMA,iBAAOvB,SAAS,CAAC,KAAI,CAACwB,UAAN,EAAkBC,IAAI,CAACC,SAAL,CAAerB,OAAf,CAAlB,CAAT,CAAoDsB,IAApD,CAAyD,UAACC,MAAD,EAAW;AACvE,iBAAI,CAACP,IAAL,CAAU,OAAV,EAAmB;AACfC,oBAAM,EAAE,UADO;AAEfjB,qBAAO,EAAEA,OAFM;AAGfwB,sBAAQ,EAAED,MAHK;AAIfL,sBAAQ,EAAE;AAJK,aAAnB,EADuE,CAQvE;AACA;;;AACAL,iBAAK,CAACY,OAAN,CAAc,UAACpB,eAAD,EAAkBqB,KAAlB,EAA2B;AACrC,kBAAMC,OAAO,GAAGJ,MAAM,CAACG,KAAD,CAAtB;;AACA,kBAAIC,OAAO,CAACC,KAAZ,EAAmB;AACf,oBAAMA,KAAK,GAAG,IAAIC,KAAJ,CAAUF,OAAO,CAACC,KAAR,CAAcE,OAAxB,CAAd;AACMF,qBAAM,CAACG,IAAP,GAAcJ,OAAO,CAACC,KAAR,CAAcG,IAA5B;AACAH,qBAAM,CAACI,IAAP,GAAcL,OAAO,CAACC,KAAR,CAAcI,IAA5B;AACN3B,+BAAe,CAACE,MAAhB,CAAuBqB,KAAvB;AACH,eALD,MAKO;AACHvB,+BAAe,CAACC,OAAhB,CAAwBqB,OAAO,CAACJ,MAAhC;AACH;AACJ,aAVD;AAYH,WAtBM,EAsBJ,UAACK,KAAD,EAAU;AACT,iBAAI,CAACZ,IAAL,CAAU,OAAV,EAAmB;AACfC,oBAAM,EAAE,UADO;AAEfW,mBAAK,EAAEA,KAFQ;AAGf5B,qBAAO,EAAEA,OAHM;AAIfkB,sBAAQ,EAAE;AAJK,aAAnB;;AAOAL,iBAAK,CAACY,OAAN,CAAc,UAACpB,eAAD,EAAoB;AAC9BA,6BAAe,CAACE,MAAhB,CAAuBqB,KAAvB;AACH,aAFD;AAGH,WAjCM,CAAP;AAmCH,SApDwC,EAoDtC,EApDsC,CAAzC;AAqDH;;AAED,aAAOpB,OAAP;AACH;AAvFL;;AAAA;AAAA,EAA0CZ,eAA1C","names":["deepCopy","fetchJson","JsonRpcProvider","JsonRpcBatchProvider","method","params","request","id","_nextId","jsonrpc","_pendingBatch","inflightRequest","resolve","reject","promise","Promise","push","_pendingBatchAggregator","setTimeout","batch","map","inflight","emit","action","provider","connection","JSON","stringify","then","result","response","forEach","index","payload","error","Error","message","code","data"],"sources":["C:\\Users\\Brandon\\Projects\\3x3-monte-dapp\\node_modules\\@ethersproject\\providers\\src.ts\\json-rpc-batch-provider.ts"],"sourcesContent":["\r\nimport { deepCopy } from \"@ethersproject/properties\";\r\nimport { fetchJson } from \"@ethersproject/web\";\r\n\r\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\r\n\r\n// Experimental\r\n\r\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\r\n    _pendingBatchAggregator: NodeJS.Timer;\r\n    _pendingBatch: Array<{\r\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\r\n        resolve: (result: any) => void,\r\n        reject: (error: Error) => void\r\n    }>;\r\n\r\n    send(method: string, params: Array<any>): Promise<any> {\r\n        const request = {\r\n            method: method,\r\n            params: params,\r\n            id: (this._nextId++),\r\n            jsonrpc: \"2.0\"\r\n        };\r\n\r\n        if (this._pendingBatch == null) {\r\n            this._pendingBatch = [ ];\r\n        }\r\n\r\n        const inflightRequest: any = { request, resolve: null, reject: null };\r\n\r\n        const promise = new Promise((resolve, reject) => {\r\n            inflightRequest.resolve = resolve;\r\n            inflightRequest.reject = reject;\r\n        });\r\n\r\n        this._pendingBatch.push(inflightRequest);\r\n\r\n        if (!this._pendingBatchAggregator) {\r\n            // Schedule batch for next event loop + short duration\r\n            this._pendingBatchAggregator = setTimeout(() => {\r\n\r\n                // Get teh current batch and clear it, so new requests\r\n                // go into the next batch\r\n                const batch = this._pendingBatch;\r\n                this._pendingBatch = null;\r\n                this._pendingBatchAggregator = null;\r\n\r\n                // Get the request as an array of requests\r\n                const request = batch.map((inflight) => inflight.request);\r\n\r\n                this.emit(\"debug\", {\r\n                    action: \"requestBatch\",\r\n                    request: deepCopy(request),\r\n                    provider: this\r\n                });\r\n\r\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\r\n                    this.emit(\"debug\", {\r\n                        action: \"response\",\r\n                        request: request,\r\n                        response: result,\r\n                        provider: this\r\n                    });\r\n\r\n                    // For each result, feed it to the correct Promise, depending\r\n                    // on whether it was a success or error\r\n                    batch.forEach((inflightRequest, index) => {\r\n                        const payload = result[index];\r\n                        if (payload.error) {\r\n                            const error = new Error(payload.error.message);\r\n                            (<any>error).code = payload.error.code;\r\n                            (<any>error).data = payload.error.data;\r\n                            inflightRequest.reject(error);\r\n                        } else {\r\n                            inflightRequest.resolve(payload.result);\r\n                        }\r\n                    });\r\n\r\n                }, (error) => {\r\n                    this.emit(\"debug\", {\r\n                        action: \"response\",\r\n                        error: error,\r\n                        request: request,\r\n                        provider: this\r\n                    });\r\n\r\n                    batch.forEach((inflightRequest) => {\r\n                        inflightRequest.reject(error);\r\n                    });\r\n                });\r\n\r\n            }, 10);\r\n        }\r\n\r\n        return promise;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}