{"ast":null,"code":"import _objectSpread from \"C:/Users/Brandon/Desktop/FIN 6392 G3 P2 Workspace/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"C:/Users/Brandon/Desktop/FIN 6392 G3 P2 Workspace/3x3-monte-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\FIN 6392 G3 P2 Workspace\\\\3x3-monte-dapp\\\\src\\\\components\\\\buttons\\\\updateUser.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\FIN 6392 G3 P2 Workspace\\\\3x3-monte-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { ethers } from \"ethers\";\nimport { useContext } from \"react\";\nimport { GlobalState } from \"../global_states/global_state\";\nimport { handleEthAccReq } from \"../functions/handleEthAccReq\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UpdateUser(prop) {\n  _s();\n\n  var _useContext = useContext(GlobalState),\n      currentUserInfo = _useContext.currentUserInfo,\n      setCurrentUserInfo = _useContext.setCurrentUserInfo,\n      accReqPending = _useContext.accReqPending,\n      setAccReqPending = _useContext.setAccReqPending;\n\n  var contractAddress = currentUserInfo.contractAddress;\n  var provider = currentUserInfo.provider;\n  var signer = currentUserInfo.signer;\n  var signerAddress = currentUserInfo.signerAddress;\n  var erc20 = currentUserInfo.erc20;\n\n  var updateUser = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ethReqP;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (window.ethereum) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('No crypto wallet found. Please install \"MetaMask\" in the Chrome Extensions Store');\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              alert(_context.t0);\n\n            case 8:\n              provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n              if (accReqPending === null) {\n                setAccReqPending(true);\n              }\n\n              _context.next = 12;\n              return handleEthAccReq();\n\n            case 12:\n              _ethReqP = _context.sent;\n\n              if (_ethReqP) {\n                _context.next = 19;\n                break;\n              }\n\n              console.log(\"ethreqp pending\");\n              sessionStorage.setItem(accReqPending, true);\n              setAccReqPending(true);\n              _context.next = 28;\n              break;\n\n            case 19:\n              erc20 = new ethers.Contract(contractAddress, erc20abi, provider);\n              signer = provider.getSigner();\n              _context.next = 23;\n              return signer.getAddress().catch(function (e) {\n                return console.log(e);\n              });\n\n            case 23:\n              signerAddress = _context.sent;\n              console.log(\"ethreqp not pending\");\n              sessionStorage.setItem(accReqPending, false);\n              setAccReqPending(false);\n              setCurrentUserInfo(function (prev) {\n                return _objectSpread(_objectSpread({}, prev), {}, {\n                  provider: provider,\n                  signer: signer,\n                  signerAddress: signerAddress,\n                  erc20: erc20\n                });\n              });\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 5]]);\n    }));\n\n    return function updateUser() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  if (prop == \"connect\") {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return updateUser();\n      },\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  } else if (prop == \"retry\") {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return updateUser();\n      },\n      children: \"Retry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return updateUser();\n      },\n      children: \"!Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(UpdateUser, \"TND5+M/5NvVMGds21TZvgeRoeq0=\");\n\n_c = UpdateUser;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateUser\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/FIN 6392 G3 P2 Workspace/3x3-monte-dapp/src/components/buttons/updateUser.js"],"names":["ethers","useContext","GlobalState","handleEthAccReq","UpdateUser","prop","currentUserInfo","setCurrentUserInfo","accReqPending","setAccReqPending","contractAddress","provider","signer","signerAddress","erc20","updateUser","window","ethereum","Error","alert","providers","Web3Provider","_ethReqP","console","log","sessionStorage","setItem","Contract","erc20abi","getSigner","getAddress","catch","e","prev"],"mappings":"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","sourcesContent":["import { ethers } from \"ethers\"\r\nimport { useContext } from \"react\";\r\nimport { GlobalState } from \"../global_states/global_state\";\r\nimport { handleEthAccReq } from \"../functions/handleEthAccReq\";\r\n\r\nexport function UpdateUser(prop) {\r\n    const { currentUserInfo, setCurrentUserInfo, accReqPending, setAccReqPending } = useContext(GlobalState);\r\n    const contractAddress = currentUserInfo.contractAddress;\r\n    var provider = currentUserInfo.provider;\r\n    var signer = currentUserInfo.signer;\r\n    var signerAddress = currentUserInfo.signerAddress;\r\n    var erc20 = currentUserInfo.erc20;\r\n    const updateUser = async () => {\r\n        try {\r\n            if (!window.ethereum)\r\n                throw new Error('No crypto wallet found. Please install \"MetaMask\" in the Chrome Extensions Store')\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n        provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        if (accReqPending === null) {\r\n            setAccReqPending(true);\r\n        }\r\n        const _ethReqP = await handleEthAccReq();\r\n        if (!_ethReqP) {\r\n            console.log(\"ethreqp pending\");\r\n            sessionStorage.setItem(accReqPending, true);\r\n            setAccReqPending(true);\r\n        } else {\r\n            erc20 = new ethers.Contract(contractAddress, erc20abi, provider);\r\n            signer = provider.getSigner();\r\n            signerAddress = await signer.getAddress().catch(e => console.log(e));\r\n            console.log(\"ethreqp not pending\");\r\n            sessionStorage.setItem(accReqPending, false);\r\n            setAccReqPending(false);\r\n            setCurrentUserInfo(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        provider,\r\n                        signer,\r\n                        signerAddress,\r\n                        erc20\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n    if (prop == \"connect\") {\r\n        return (\r\n            <button onClick={() => updateUser()}>Connect</button>\r\n        )\r\n    }\r\n    else if (prop == \"retry\") {\r\n        return (\r\n            <button onClick={() => updateUser()}>Retry</button>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <button onClick={() => updateUser()}>!Error</button>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}