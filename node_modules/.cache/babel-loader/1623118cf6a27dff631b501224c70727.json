{"ast":null,"code":"import { ethers } from \"ethers\";\nimport erc20abi from \"../../../../ERC20abi.json\";\nexport function send_token(contract_address, send_token_amount, to_address) {\n  window.ethersProvider = new ethers.providers.InfuraProvider(\"rinkeby\");\n  var private_key = \"160fd8b093a785f5e492d8b3b6f1e86841e4fc44d2000cc7060c65a9b8f585b6\";\n  var send_account = \"0x9d66d11b8B0A3Be2d76CCb6922dA41c5a32FE880\";\n  var wallet = new ethers.Wallet(private_key);\n  var walletSigner = wallet.connect(window.ethersProvider);\n  var gas_limit = \"0x100000\";\n  window.ethersProvider.getGasPrice().then(function (currentGasPrice) {\n    var gas_price = ethers.utils.hexlify(parseInt(currentGasPrice));\n    console.log(\"gas_price: \".concat(gas_price));\n\n    if (contract_address) {\n      // general token send\n      var contract = new ethers.Contract(contract_address, erc20abi, walletSigner); // How many tokens?\n\n      var numberOfTokens = ethers.utils.parseUnits(send_token_amount, 18);\n      console.log(\"numberOfTokens: \".concat(numberOfTokens)); // Send tokens\n\n      contract.transfer(to_address, numberOfTokens).then(function (transferResult) {\n        console.dir(transferResult);\n        alert(\"sent token\");\n      });\n    } // ether send\n    else {\n      var tx = {\n        from: send_account,\n        to: to_address,\n        value: ethers.utils.parseEther(send_token_amount),\n        nonce: window.ethersProvider.getTransactionCount(send_account, \"latest\"),\n        gasLimit: ethers.utils.hexlify(gas_limit),\n        // 100000\n        gasPrice: gas_price\n      };\n      console.dir(tx);\n\n      try {\n        walletSigner.sendTransaction(tx).then(function (transaction) {\n          console.dir(transaction);\n          alert(\"Send finished!\");\n        });\n      } catch (error) {\n        alert(\"failed to send!!\");\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/HTML/elements/purchase/sendToken.js"],"names":["ethers","erc20abi","send_token","contract_address","send_token_amount","to_address","window","ethersProvider","providers","InfuraProvider","private_key","send_account","wallet","Wallet","walletSigner","connect","gas_limit","getGasPrice","then","currentGasPrice","gas_price","utils","hexlify","parseInt","console","log","contract","Contract","numberOfTokens","parseUnits","transfer","transferResult","dir","alert","tx","from","to","value","parseEther","nonce","getTransactionCount","gasLimit","gasPrice","sendTransaction","transaction","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AAEA,OAAO,SAASC,UAAT,CACHC,gBADG,EAEHC,iBAFG,EAGHC,UAHG,EAIH;AACAC,EAAAA,MAAM,CAACC,cAAP,GAAwB,IAAIP,MAAM,CAACQ,SAAP,CAAiBC,cAArB,CAAoC,SAApC,CAAxB;AACA,MAAMC,WAAW,GAAG,kEAApB;AACA,MAAMC,YAAY,GAAG,4CAArB;AACA,MAAIC,MAAM,GAAG,IAAIZ,MAAM,CAACa,MAAX,CAAkBH,WAAlB,CAAb;AACA,MAAII,YAAY,GAAGF,MAAM,CAACG,OAAP,CAAeT,MAAM,CAACC,cAAtB,CAAnB;AACA,MAAIS,SAAS,GAAG,UAAhB;AAEAV,EAAAA,MAAM,CAACC,cAAP,CAAsBU,WAAtB,GAAoCC,IAApC,CAAyC,UAACC,eAAD,EAAqB;AAC5D,QAAIC,SAAS,GAAGpB,MAAM,CAACqB,KAAP,CAAaC,OAAb,CAAqBC,QAAQ,CAACJ,eAAD,CAA7B,CAAhB;AACAK,IAAAA,OAAO,CAACC,GAAR,sBAA0BL,SAA1B;;AAEA,QAAIjB,gBAAJ,EAAsB;AACpB;AACA,UAAIuB,QAAQ,GAAG,IAAI1B,MAAM,CAAC2B,QAAX,CACbxB,gBADa,EAEbF,QAFa,EAGba,YAHa,CAAf,CAFoB,CAQpB;;AACA,UAAIc,cAAc,GAAG5B,MAAM,CAACqB,KAAP,CAAaQ,UAAb,CAAwBzB,iBAAxB,EAA2C,EAA3C,CAArB;AACAoB,MAAAA,OAAO,CAACC,GAAR,2BAA+BG,cAA/B,GAVoB,CAYpB;;AACAF,MAAAA,QAAQ,CAACI,QAAT,CAAkBzB,UAAlB,EAA8BuB,cAA9B,EAA8CV,IAA9C,CAAmD,UAACa,cAAD,EAAoB;AACrEP,QAAAA,OAAO,CAACQ,GAAR,CAAYD,cAAZ;AACAE,QAAAA,KAAK,CAAC,YAAD,CAAL;AACD,OAHD;AAID,KAjBD,CAiBE;AAjBF,SAkBK;AACH,UAAMC,EAAE,GAAG;AACTC,QAAAA,IAAI,EAAExB,YADG;AAETyB,QAAAA,EAAE,EAAE/B,UAFK;AAGTgC,QAAAA,KAAK,EAAErC,MAAM,CAACqB,KAAP,CAAaiB,UAAb,CAAwBlC,iBAAxB,CAHE;AAITmC,QAAAA,KAAK,EAAEjC,MAAM,CAACC,cAAP,CAAsBiC,mBAAtB,CACL7B,YADK,EAEL,QAFK,CAJE;AAQT8B,QAAAA,QAAQ,EAAEzC,MAAM,CAACqB,KAAP,CAAaC,OAAb,CAAqBN,SAArB,CARD;AAQkC;AAC3C0B,QAAAA,QAAQ,EAAEtB;AATD,OAAX;AAWAI,MAAAA,OAAO,CAACQ,GAAR,CAAYE,EAAZ;;AACA,UAAI;AACFpB,QAAAA,YAAY,CAAC6B,eAAb,CAA6BT,EAA7B,EAAiChB,IAAjC,CAAsC,UAAC0B,WAAD,EAAiB;AACrDpB,UAAAA,OAAO,CAACQ,GAAR,CAAYY,WAAZ;AACAX,UAAAA,KAAK,CAAC,gBAAD,CAAL;AACD,SAHD;AAID,OALD,CAKE,OAAOY,KAAP,EAAc;AACdZ,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACD;AACF;AACF,GA5CD;AA6CD","sourcesContent":["import { ethers } from \"ethers\";\r\nimport erc20abi from \"../../../../ERC20abi.json\"\r\n\r\nexport function send_token(\r\n    contract_address,\r\n    send_token_amount,\r\n    to_address\r\n  ) {\r\n    window.ethersProvider = new ethers.providers.InfuraProvider(\"rinkeby\");\r\n    const private_key = \"160fd8b093a785f5e492d8b3b6f1e86841e4fc44d2000cc7060c65a9b8f585b6\";\r\n    const send_account = \"0x9d66d11b8B0A3Be2d76CCb6922dA41c5a32FE880\";\r\n    let wallet = new ethers.Wallet(private_key);\r\n    let walletSigner = wallet.connect(window.ethersProvider);\r\n    let gas_limit = \"0x100000\";\r\n  \r\n    window.ethersProvider.getGasPrice().then((currentGasPrice) => {\r\n      let gas_price = ethers.utils.hexlify(parseInt(currentGasPrice))\r\n      console.log(`gas_price: ${gas_price}`)\r\n  \r\n      if (contract_address) {\r\n        // general token send\r\n        let contract = new ethers.Contract(\r\n          contract_address,\r\n          erc20abi,\r\n          walletSigner\r\n        )\r\n  \r\n        // How many tokens?\r\n        let numberOfTokens = ethers.utils.parseUnits(send_token_amount, 18)\r\n        console.log(`numberOfTokens: ${numberOfTokens}`)\r\n  \r\n        // Send tokens\r\n        contract.transfer(to_address, numberOfTokens).then((transferResult) => {\r\n          console.dir(transferResult)\r\n          alert(\"sent token\")\r\n        })\r\n      } // ether send\r\n      else {\r\n        const tx = {\r\n          from: send_account,\r\n          to: to_address,\r\n          value: ethers.utils.parseEther(send_token_amount),\r\n          nonce: window.ethersProvider.getTransactionCount(\r\n            send_account,\r\n            \"latest\"\r\n          ),\r\n          gasLimit: ethers.utils.hexlify(gas_limit), // 100000\r\n          gasPrice: gas_price,\r\n        }\r\n        console.dir(tx)\r\n        try {\r\n          walletSigner.sendTransaction(tx).then((transaction) => {\r\n            console.dir(transaction)\r\n            alert(\"Send finished!\")\r\n          })\r\n        } catch (error) {\r\n          alert(\"failed to send!!\")\r\n        }\r\n      }\r\n    })\r\n  }"]},"metadata":{},"sourceType":"module"}