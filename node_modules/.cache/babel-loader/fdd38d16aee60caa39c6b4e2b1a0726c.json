{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\src\\\\components\\\\states.js\",\n    _s = $RefreshSig$();\n\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport React from \"react\";\nimport { useState, useEffect, createContext } from \"react\";\nimport { useContext, useMemo } from \"react\";\nimport { GlobalState } from \"./global_state\";\nimport { Pages } from \"./site_stuff/pages\";\nimport { OnConnect } from \"./updated_states\";\nimport { AccChange } from \"./accChange\"; //  export function GlobalStates() {\n//    return useContext(GlobalState);\n//  }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function GlobalStateDefault(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState({\n    provider: \"-\",\n    signer: \"-\",\n    signerAddress: \"-\",\n    balance: \"-\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentUserInfo = _useState2[0],\n      setCurrentUserInfo = _useState2[1];\n\n  useEffect(function () {\n    if (currentUserInfo.signerAddress !== \"-\") {\n      var change = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var currProvider, signer, signerAddress, updatedStates;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n                  _context.next = 3;\n                  return currProvider.send(\"eth_requestAccounts\", []);\n\n                case 3:\n                  signer = currProvider.getSigner();\n                  _context.next = 6;\n                  return signer.getAddress();\n\n                case 6:\n                  signerAddress = _context.sent;\n                  updatedStates = {\n                    provider: currProvider,\n                    signer: signer,\n                    signerAddress: signerAddress,\n                    balance: \"-\"\n                  };\n                  setCurrentUserInfo(updatedStates);\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function change() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    }\n  }, [currentUserInfo.signerAddress, currentUserInfo.provider, currentUserInfo.balance]);\n  var globalStateValue = useMemo(function () {\n    return {\n      currentUserInfo: currentUserInfo,\n      setCurrentUserInfo: setCurrentUserInfo\n    };\n  }, [currentUserInfo.signerAddress, currentUserInfo.provider, currentUserInfo.balance]); // console.log(currentUserInfo)\n\n  console.log(globalStateValue);\n  return /*#__PURE__*/_jsxDEV(GlobalState.Provider, {\n    value: globalStateValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GlobalStateDefault, \"bGMm3Ew3SG5icADfTjLzb1nVVuE=\");\n\n_c = GlobalStateDefault;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalStateDefault\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/states.js"],"names":["React","useState","useEffect","createContext","useContext","useMemo","GlobalState","Pages","OnConnect","AccChange","GlobalStateDefault","children","provider","signer","signerAddress","balance","currentUserInfo","setCurrentUserInfo","change","currProvider","ethers","providers","Web3Provider","window","ethereum","send","getSigner","getAddress","updatedStates","globalStateValue","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,aAA9B,QAAmD,OAAnD;AACA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B,C,CAEA;AACA;AACA;;;AAGA,OAAO,SAASC,kBAAT,OAA2C;AAAA;;AAAA,MAAbC,QAAa,QAAbA,QAAa;;AAEhD,kBAA8CV,QAAQ,CAAC;AACrDW,IAAAA,QAAQ,EAAE,GAD2C;AAErDC,IAAAA,MAAM,EAAE,GAF6C;AAGrDC,IAAAA,aAAa,EAAE,GAHsC;AAIrDC,IAAAA,OAAO,EAAE;AAJ4C,GAAD,CAAtD;AAAA;AAAA,MAAOC,eAAP;AAAA,MAAwBC,kBAAxB;;AAOAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIc,eAAe,CAACF,aAAhB,KAAkC,GAAtC,EAA2C;AAAA,UAC1BI,MAD0B;AAAA,6EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,kBAAAA,YADR,GACuB,IAAIC,MAAM,CAACC,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CADvB;AAAA;AAAA,yBAEIL,YAAY,CAACM,IAAb,CAAkB,qBAAlB,EAAyC,EAAzC,CAFJ;;AAAA;AAGIZ,kBAAAA,MAHJ,GAGaM,YAAY,CAACO,SAAb,EAHb;AAAA;AAAA,yBAI0Bb,MAAM,CAACc,UAAP,EAJ1B;;AAAA;AAIIb,kBAAAA,aAJJ;AAMIc,kBAAAA,aANJ,GAMoB;AAClBhB,oBAAAA,QAAQ,EAAEO,YADQ;AAElBN,oBAAAA,MAAM,EAAEA,MAFU;AAGlBC,oBAAAA,aAAa,EAAEA,aAHG;AAIlBC,oBAAAA,OAAO,EAAE;AAJS,mBANpB;AAaFE,kBAAAA,kBAAkB,CAACW,aAAD,CAAlB;;AAbE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADyC;;AAAA,wBAC1BV,MAD0B;AAAA;AAAA;AAAA;AAgB1C;AACF,GAlBQ,EAkBN,CAAEF,eAAe,CAACF,aAAlB,EAAiCE,eAAe,CAACJ,QAAjD,EAA2DI,eAAe,CAACD,OAA3E,CAlBM,CAAT;AAoBA,MAAMc,gBAAgB,GAAGxB,OAAO,CAAC;AAAA,WAAO;AAAEW,MAAAA,eAAe,EAAfA,eAAF;AAAmBC,MAAAA,kBAAkB,EAAlBA;AAAnB,KAAP;AAAA,GAAD,EAAiD,CAAED,eAAe,CAACF,aAAlB,EAAiCE,eAAe,CAACJ,QAAjD,EAA2DI,eAAe,CAACD,OAA3E,CAAjD,CAAhC,CA7BgD,CA8BhD;;AACAe,EAAAA,OAAO,CAACC,GAAR,CAAYF,gBAAZ;AAEA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEA,gBAA7B;AAAA,cACGlB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAvCeD,kB;;KAAAA,kB","sourcesContent":["import React from \"react\"\r\nimport { useState, useEffect, createContext } from \"react\";\r\nimport { useContext, useMemo } from \"react\";\r\nimport { GlobalState } from \"./global_state\";\r\nimport { Pages } from \"./site_stuff/pages\";\r\nimport { OnConnect } from \"./updated_states\";\r\nimport { AccChange } from \"./accChange\";\r\n\r\n//  export function GlobalStates() {\r\n//    return useContext(GlobalState);\r\n//  }\r\n\r\n\r\nexport function GlobalStateDefault({ children })  {\r\n  \r\n  const [currentUserInfo, setCurrentUserInfo] = useState({\r\n    provider: \"-\",\r\n    signer: \"-\",\r\n    signerAddress: \"-\",\r\n    balance: \"-\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currentUserInfo.signerAddress !== \"-\") {\r\n      async function change() {\r\n        const currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n    await currProvider.send(\"eth_requestAccounts\", []);\r\n    const signer = currProvider.getSigner();\r\n    const signerAddress = await signer.getAddress();\r\n\r\n    const updatedStates = {\r\n        provider: currProvider,\r\n        signer: signer,\r\n        signerAddress: signerAddress,\r\n        balance: \"-\"\r\n    }\r\n    \r\n    setCurrentUserInfo(updatedStates);\r\n      }\r\n    }\r\n  }, [ currentUserInfo.signerAddress, currentUserInfo.provider, currentUserInfo.balance]);\r\n\r\n  const globalStateValue = useMemo(() => ({ currentUserInfo, setCurrentUserInfo}), [ currentUserInfo.signerAddress, currentUserInfo.provider, currentUserInfo.balance])\r\n  // console.log(currentUserInfo)\r\n  console.log(globalStateValue)\r\n\r\n  return (\r\n    <GlobalState.Provider value={globalStateValue}>\r\n      {children}\r\n    </GlobalState.Provider>\r\n    )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}