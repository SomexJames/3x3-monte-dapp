{"ast":null,"code":"import _objectSpread from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { GlobalState } from \"../../../global_states/global_state\";\nimport { dealCards } from \"../../../game/functions/dealCards\";\nimport { generateDeck } from \"../../../game/functions/generateDeck\";\nimport { getCount } from \"../../../game/functions/getCount\";\nexport function newGame() {\n  _s();\n\n  var _useContext = useContext(GlobalState),\n      currentGameInfo = _useContext.currentGameInfo,\n      setGameInfo = _useContext.setGameInfo;\n\n  var deck = currentGameInfo.deck;\n  var player = currentGameInfo.player;\n  var dealer = currentGameInfo.dealer;\n  console.log(\"NewGame just rendered\");\n\n  function getRandomCard(__deck) {\n    console.log(\"getRandomCard() just ran\");\n    var updatedDeck = __deck;\n    var ind = Math.floor(Math.random() * updatedDeck.length);\n    var randomCard = updatedDeck[ind];\n    updatedDeck.splice(ind, 1);\n    setGameInfo(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        deck: updatedDeck\n      });\n    });\n    return randomCard;\n  }\n\n  function dealCards(_deck) {\n    var playerCard1 = getRandomCard(_deck);\n    var dealerCard1 = getRandomCard(_deck);\n    var playerCard2 = getRandomCard(_deck);\n    var playerStartingHand = [playerCard1, playerCard2];\n    var dealerStartingHand = [dealerCard1];\n    player = {\n      cards: playerStartingHand,\n      count: getCount(playerStartingHand)\n    };\n    dealer = {\n      cards: dealerStartingHand,\n      count: getCount(dealerStartingHand)\n    };\n    setGameInfo(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        player: player,\n        dealer: dealer\n      });\n    });\n  }\n\n  function startNewGame() {\n    console.log(\"startNewGame() just ran\");\n    deck = deck.length < 10 ? generateDeck() : deck;\n    dealCards(deck);\n    setGameInfo(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        gameOver: false,\n        message: null\n      });\n    });\n  }\n\n  startNewGame();\n}\n\n_s(newGame, \"ZWTofd3nCfMzZOlLOMaYw8FI9PE=\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/HTML/elements/buttons/startNewGame.js"],"names":["useContext","GlobalState","dealCards","generateDeck","getCount","newGame","currentGameInfo","setGameInfo","deck","player","dealer","console","log","getRandomCard","__deck","updatedDeck","ind","Math","floor","random","length","randomCard","splice","prev","_deck","playerCard1","dealerCard1","playerCard2","playerStartingHand","dealerStartingHand","cards","count","startNewGame","gameOver","message"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,SAAT,QAA0B,mCAA1B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA,SAASC,QAAT,QAAyB,kCAAzB;AAEA,OAAO,SAASC,OAAT,GAAmB;AAAA;;AACtB,oBAAyCL,UAAU,CAACC,WAAD,CAAnD;AAAA,MAAQK,eAAR,eAAQA,eAAR;AAAA,MAAyBC,WAAzB,eAAyBA,WAAzB;;AACA,MAAIC,IAAI,GAAGF,eAAe,CAACE,IAA3B;AACA,MAAIC,MAAM,GAAGH,eAAe,CAACG,MAA7B;AACA,MAAIC,MAAM,GAAGJ,eAAe,CAACI,MAA7B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AAEA,WAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC3BH,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,QAAIG,WAAW,GAAGD,MAAlB;AACA,QAAIE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,WAAW,CAACK,MAAvC,CAAV;AACA,QAAMC,UAAU,GAAIN,WAAW,CAACC,GAAD,CAA/B;AACAD,IAAAA,WAAW,CAACO,MAAZ,CAAmBN,GAAnB,EAAwB,CAAxB;AAEAT,IAAAA,WAAW,CAAC,UAAAgB,IAAI,EAAI;AAChB,6CACOA,IADP;AAEIf,QAAAA,IAAI,EAAEO;AAFV;AAIH,KALU,CAAX;AAMA,WAAQM,UAAR;AACH;;AAED,WAASnB,SAAT,CAAmBsB,KAAnB,EAA0B;AAEtB,QAAMC,WAAW,GAAGZ,aAAa,CAACW,KAAD,CAAjC;AACA,QAAME,WAAW,GAAGb,aAAa,CAACW,KAAD,CAAjC;AACA,QAAMG,WAAW,GAAGd,aAAa,CAACW,KAAD,CAAjC;AACA,QAAMI,kBAAkB,GAAG,CAACH,WAAD,EAAcE,WAAd,CAA3B;AACA,QAAME,kBAAkB,GAAG,CAACH,WAAD,CAA3B;AAGAjB,IAAAA,MAAM,GAAG;AACPqB,MAAAA,KAAK,EAAEF,kBADA;AAEPG,MAAAA,KAAK,EAAE3B,QAAQ,CAACwB,kBAAD;AAFR,KAAT;AAKAlB,IAAAA,MAAM,GAAG;AACPoB,MAAAA,KAAK,EAAED,kBADA;AAEPE,MAAAA,KAAK,EAAE3B,QAAQ,CAACyB,kBAAD;AAFR,KAAT;AAKAtB,IAAAA,WAAW,CAAC,UAAAgB,IAAI,EAAI;AAChB,6CAAWA,IAAX;AAAiBd,QAAAA,MAAM,EAANA,MAAjB;AAAyBC,QAAAA,MAAM,EAANA;AAAzB;AACH,KAFU,CAAX;AAKD;;AAEH,WAASsB,YAAT,GAAwB;AACpBrB,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAJ,IAAAA,IAAI,GAAGA,IAAI,CAACY,MAAL,GAAc,EAAd,GAAmBjB,YAAY,EAA/B,GAAoCK,IAA3C;AACAN,IAAAA,SAAS,CAACM,IAAD,CAAT;AAEAD,IAAAA,WAAW,CAAC,UAAAgB,IAAI,EAAI;AAAC,6CAAUA,IAAV;AAAgBU,QAAAA,QAAQ,EAAE,KAA1B;AAAiCC,QAAAA,OAAO,EAAE;AAA1C;AAAgD,KAA1D,CAAX;AACH;;AAEDF,EAAAA,YAAY;AACf;;GA1De3B,O","sourcesContent":["import { useContext } from \"react\"\r\nimport { GlobalState } from \"../../../global_states/global_state\";\r\nimport { dealCards } from \"../../../game/functions/dealCards\";\r\nimport { generateDeck } from \"../../../game/functions/generateDeck\";\r\nimport { getCount } from \"../../../game/functions/getCount\";\r\n\r\nexport function newGame() {\r\n    const { currentGameInfo, setGameInfo } = useContext(GlobalState);\r\n    var deck = currentGameInfo.deck;\r\n    var player = currentGameInfo.player;\r\n    var dealer = currentGameInfo.dealer;\r\n    console.log(\"NewGame just rendered\");\r\n\r\n    function getRandomCard(__deck) {\r\n        console.log(\"getRandomCard() just ran\");\r\n        var updatedDeck = __deck;\r\n        var ind = Math.floor(Math.random() * updatedDeck.length);\r\n        const randomCard  = updatedDeck[ind];\r\n        updatedDeck.splice(ind, 1);\r\n        \r\n        setGameInfo(prev => {\r\n            return {\r\n                ...prev,\r\n                deck: updatedDeck\r\n            }\r\n        })\r\n        return  randomCard \r\n    }\r\n\r\n    function dealCards(_deck) {\r\n\r\n        const playerCard1 = getRandomCard(_deck);\r\n        const dealerCard1 = getRandomCard(_deck);\r\n        const playerCard2 = getRandomCard(_deck);\r\n        const playerStartingHand = [playerCard1, playerCard2];\r\n        const dealerStartingHand = [dealerCard1];\r\n      \r\n      \r\n        player = {\r\n          cards: playerStartingHand,\r\n          count: getCount(playerStartingHand) };\r\n\r\n      \r\n        dealer = {\r\n          cards: dealerStartingHand,\r\n          count: getCount(dealerStartingHand) };\r\n\r\n      \r\n        setGameInfo(prev => {\r\n            return {...prev, player, dealer}\r\n        })\r\n      \r\n        \r\n      }\r\n\r\n    function startNewGame() {\r\n        console.log(\"startNewGame() just ran\");\r\n        deck = deck.length < 10 ? generateDeck() : deck;\r\n        dealCards(deck);\r\n\r\n        setGameInfo(prev => {return{...prev, gameOver: false, message: null}});\r\n    }\r\n\r\n    startNewGame();\r\n}"]},"metadata":{},"sourceType":"module"}