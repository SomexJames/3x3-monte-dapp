{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Brandon\\\\Projects\\\\3x3-monte-dapp\\\\src\\\\components\\\\buttons\\\\updateUser.js\",\n  _s = $RefreshSig$();\nimport { ethers } from \"ethers\";\nimport { useContext } from \"react\";\nimport { GlobalState } from \"../global_states/global_state\";\nimport { handleEthAccReq } from \"../functions/handleEthAccReq\";\nimport erc20abi from \"../../ERC20abi.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function UpdateUser(prop) {\n  _s();\n  const {\n    currentUserInfo,\n    setCurrentUserInfo,\n    accReqPending,\n    setAccReqPending\n  } = useContext(GlobalState);\n  const contractAddress = currentUserInfo.contractAddress;\n  var provider = currentUserInfo.provider;\n  var signer = currentUserInfo.signer;\n  var signerAddress = currentUserInfo.signerAddress;\n  var erc20 = currentUserInfo.erc20;\n  const updateUser = async () => {\n    try {\n      if (!window.ethereum) throw new Error('No crypto wallet found. Please install \"MetaMask\" in the Chrome Extensions Store');\n    } catch (err) {\n      alert(err);\n    }\n    provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    if (accReqPending === null) {\n      setAccReqPending(true);\n    }\n    const _ethReqP = await handleEthAccReq();\n    if (!_ethReqP) {\n      sessionStorage.setItem(accReqPending, true);\n      setAccReqPending(true);\n    } else {\n      signer = provider.getSigner();\n      signerAddress = await signer.getAddress().catch(e => console.log(e));\n      erc20 = new ethers.Contract(contractAddress, erc20abi, signer);\n      sessionStorage.setItem(accReqPending, false);\n      setAccReqPending(false);\n      setCurrentUserInfo(prev => {\n        return {\n          ...prev,\n          provider,\n          signer,\n          signerAddress,\n          erc20\n        };\n      });\n    }\n  };\n  if (prop.prop == \"connect\") {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => updateUser(),\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  } else if (prop.prop == \"retry\") {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => updateUser(),\n      children: \"Retry\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: () => updateUser(),\n      children: \"!Error\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n}\n_s(UpdateUser, \"TND5+M/5NvVMGds21TZvgeRoeq0=\");\n_c = UpdateUser;\nvar _c;\n$RefreshReg$(_c, \"UpdateUser\");","map":{"version":3,"names":["ethers","useContext","GlobalState","handleEthAccReq","erc20abi","jsxDEV","_jsxDEV","UpdateUser","prop","_s","currentUserInfo","setCurrentUserInfo","accReqPending","setAccReqPending","contractAddress","provider","signer","signerAddress","erc20","updateUser","window","ethereum","Error","err","alert","providers","Web3Provider","_ethReqP","sessionStorage","setItem","getSigner","getAddress","catch","e","console","log","Contract","prev","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Brandon/Projects/3x3-monte-dapp/src/components/buttons/updateUser.js"],"sourcesContent":["import { ethers } from \"ethers\"\r\nimport { useContext } from \"react\";\r\nimport { GlobalState } from \"../global_states/global_state\";\r\nimport { handleEthAccReq } from \"../functions/handleEthAccReq\";\r\nimport erc20abi from \"../../ERC20abi.json\"\r\n\r\nexport function UpdateUser(prop) {\r\n    const { currentUserInfo, setCurrentUserInfo, accReqPending, setAccReqPending } = useContext(GlobalState);\r\n    const contractAddress = currentUserInfo.contractAddress;\r\n    var provider = currentUserInfo.provider;\r\n    var signer = currentUserInfo.signer;\r\n    var signerAddress = currentUserInfo.signerAddress;\r\n    var erc20 = currentUserInfo.erc20;\r\n    const updateUser = async () => {\r\n        try {\r\n            if (!window.ethereum)\r\n                throw new Error('No crypto wallet found. Please install \"MetaMask\" in the Chrome Extensions Store')\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n        provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n        if (accReqPending === null) {\r\n            setAccReqPending(true);\r\n        }\r\n        const _ethReqP = await handleEthAccReq();\r\n        if (!_ethReqP) {\r\n            sessionStorage.setItem(accReqPending, true);\r\n            setAccReqPending(true);\r\n        } else {\r\n            signer = provider.getSigner();\r\n            signerAddress = await signer.getAddress().catch(e => console.log(e));\r\n            erc20 = new ethers.Contract(contractAddress, erc20abi, signer);\r\n            sessionStorage.setItem(accReqPending, false);\r\n            setAccReqPending(false);\r\n            setCurrentUserInfo(prev => {\r\n                    return {\r\n                        ...prev,\r\n                        provider,\r\n                        signer,\r\n                        signerAddress,\r\n                        erc20\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n    if (prop.prop == \"connect\") {\r\n        return (\r\n            <button className=\"button\" onClick={() => updateUser()}>Connect</button>\r\n        )\r\n    }\r\n    else if (prop.prop == \"retry\") {\r\n        return (\r\n            <button className=\"button\" onClick={() => updateUser()}>Retry</button>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <button className=\"button\" onClick={() => updateUser()}>!Error</button>\r\n        )\r\n    }\r\n}"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,QAAQ;AAC/B,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,eAAe,QAAQ,8BAA8B;AAC9D,OAAOC,QAAQ,MAAM,qBAAqB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,SAASC,UAAUA,CAACC,IAAI,EAAE;EAAAC,EAAA;EAC7B,MAAM;IAAEC,eAAe;IAAEC,kBAAkB;IAAEC,aAAa;IAAEC;EAAiB,CAAC,GAAGZ,UAAU,CAACC,WAAW,CAAC;EACxG,MAAMY,eAAe,GAAGJ,eAAe,CAACI,eAAe;EACvD,IAAIC,QAAQ,GAAGL,eAAe,CAACK,QAAQ;EACvC,IAAIC,MAAM,GAAGN,eAAe,CAACM,MAAM;EACnC,IAAIC,aAAa,GAAGP,eAAe,CAACO,aAAa;EACjD,IAAIC,KAAK,GAAGR,eAAe,CAACQ,KAAK;EACjC,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACA,IAAI,CAACC,MAAM,CAACC,QAAQ,EAChB,MAAM,IAAIC,KAAK,CAAC,kFAAkF,CAAC;IAC3G,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVC,KAAK,CAACD,GAAG,CAAC;IACd;IACAR,QAAQ,GAAG,IAAIf,MAAM,CAACyB,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,EAAE,KAAK,CAAC;IACpE,IAAIT,aAAa,KAAK,IAAI,EAAE;MACxBC,gBAAgB,CAAC,IAAI,CAAC;IAC1B;IACA,MAAMc,QAAQ,GAAG,MAAMxB,eAAe,CAAC,CAAC;IACxC,IAAI,CAACwB,QAAQ,EAAE;MACXC,cAAc,CAACC,OAAO,CAACjB,aAAa,EAAE,IAAI,CAAC;MAC3CC,gBAAgB,CAAC,IAAI,CAAC;IAC1B,CAAC,MAAM;MACHG,MAAM,GAAGD,QAAQ,CAACe,SAAS,CAAC,CAAC;MAC7Bb,aAAa,GAAG,MAAMD,MAAM,CAACe,UAAU,CAAC,CAAC,CAACC,KAAK,CAACC,CAAC,IAAIC,OAAO,CAACC,GAAG,CAACF,CAAC,CAAC,CAAC;MACpEf,KAAK,GAAG,IAAIlB,MAAM,CAACoC,QAAQ,CAACtB,eAAe,EAAEV,QAAQ,EAAEY,MAAM,CAAC;MAC9DY,cAAc,CAACC,OAAO,CAACjB,aAAa,EAAE,KAAK,CAAC;MAC5CC,gBAAgB,CAAC,KAAK,CAAC;MACvBF,kBAAkB,CAAC0B,IAAI,IAAI;QACnB,OAAO;UACH,GAAGA,IAAI;UACPtB,QAAQ;UACRC,MAAM;UACNC,aAAa;UACbC;QACJ,CAAC;MACL,CAAC,CAAC;IACV;EAEJ,CAAC;EACD,IAAIV,IAAI,CAACA,IAAI,IAAI,SAAS,EAAE;IACxB,oBACIF,OAAA;MAAQgC,SAAS,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMpB,UAAU,CAAC,CAAE;MAAAqB,QAAA,EAAC;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAEhF,CAAC,MACI,IAAIpC,IAAI,CAACA,IAAI,IAAI,OAAO,EAAE;IAC3B,oBACIF,OAAA;MAAQgC,SAAS,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMpB,UAAU,CAAC,CAAE;MAAAqB,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAE9E,CAAC,MACI;IACD,oBACItC,OAAA;MAAQgC,SAAS,EAAC,QAAQ;MAACC,OAAO,EAAEA,CAAA,KAAMpB,UAAU,CAAC,CAAE;MAAAqB,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAE/E;AACJ;AAACnC,EAAA,CAvDeF,UAAU;AAAAsC,EAAA,GAAVtC,UAAU;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}