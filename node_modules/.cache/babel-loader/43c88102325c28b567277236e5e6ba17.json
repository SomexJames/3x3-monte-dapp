{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Brandon/Desktop/blackjack-dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\Brandon\\\\Desktop\\\\blackjack-dapp\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { ethers } from \"ethers\";\nimport { useContext } from \"react\";\nimport { GlobalState } from \"./global_states/global_state\";\nexport function Connect() {\n  var connectFunction = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currProvider, signer, signerAddress;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n              _context.next = 3;\n              return currProvider.send(\"eth_requestAccounts\", []);\n\n            case 3:\n              signer = currProvider.getSigner();\n              _context.next = 6;\n              return signer.getAddress();\n\n            case 6:\n              signerAddress = _context.sent;\n              return _context.abrupt(\"return\", {\n                provider: currProvider,\n                signer: signer,\n                signerAddress: signerAddress,\n                balance: \"-\"\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function connectFunction() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return connectFunction();\n}\n_c = Connect;\n\nvar _c;\n\n$RefreshReg$(_c, \"Connect\");","map":{"version":3,"sources":["C:/Users/Brandon/Desktop/blackjack-dapp/src/components/accChange.js"],"names":["ethers","useContext","GlobalState","Connect","connectFunction","currProvider","providers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","signerAddress","provider","balance"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAGA,OAAO,SAASC,OAAT,GAAmB;AAClB,MAAMC,eAAe;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,cAAAA,YADc,GACC,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,EAAmD,KAAnD,CADD;AAAA;AAAA,qBAEdJ,YAAY,CAACK,IAAb,CAAkB,qBAAlB,EAAyC,EAAzC,CAFc;;AAAA;AAGdC,cAAAA,MAHc,GAGLN,YAAY,CAACO,SAAb,EAHK;AAAA;AAAA,qBAIQD,MAAM,CAACE,UAAP,EAJR;;AAAA;AAIdC,cAAAA,aAJc;AAAA,+CAMb;AACHC,gBAAAA,QAAQ,EAAEV,YADP;AAEHM,gBAAAA,MAAM,EAAEA,MAFL;AAGHG,gBAAAA,aAAa,EAAEA,aAHZ;AAIHE,gBAAAA,OAAO,EAAE;AAJN,eANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfZ,eAAe;AAAA;AAAA;AAAA,KAArB;;AAcA,SAAOA,eAAe,EAAtB;AACH;KAhBWD,O","sourcesContent":["import { ethers } from \"ethers\";\r\nimport { useContext } from \"react\";\r\nimport { GlobalState } from \"./global_states/global_state\";\r\n\r\n\r\nexport function Connect() {\r\n        const connectFunction = async () => {\r\n            const currProvider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\r\n            await currProvider.send(\"eth_requestAccounts\", []);\r\n            const signer = currProvider.getSigner();\r\n            const signerAddress = await signer.getAddress();\r\n\r\n            return {\r\n                provider: currProvider,\r\n                signer: signer,\r\n                signerAddress: signerAddress,\r\n                balance: \"-\"\r\n            }\r\n        }\r\n\r\n        return connectFunction();\r\n    }"]},"metadata":{},"sourceType":"module"}